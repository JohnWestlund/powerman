#!/bin/sh
# Restart as wish \
exec wish "$0" -- "$@"
####################################################################
# $Id$
# by Andrew C. Uselton <uselton2@llnl.gov> 
# Copyright (C) 2000 Regents of the University of California
# See ../DISCLAIMER
# v. 0-0-1:  2001-07-11
# v. 0-0-2:  2001-07-31
####################################################################
#
# clusterview [-c file] [-l file] [-d] [-v]

####################################################################
# proc declarations
# 
####################################################################
proc usage msg {
  global argv0
  puts "usage: $argv0 \[-c file\] \[-d\] \[-l libdir\] \[-v\]"
  puts "-c file   = load file as config file"
  puts "-d        = debugging output"
  puts "-l libdir = look for tcl libs in libdir"
  puts "-v        = be verbose"
  puts $msg
  exit
}

proc toggle_lockout {} {
    global lockout_val
    global unlockable

    if {$unlockable} {
	set lockout_val [expr 1 - $lockout_val]
	if {$lockout_val} {
	.bottom.lockout configure -text "unlocked"
	.bottom.lockout configure -foreground red
	} else {
	.bottom.lockout configure -text "locked"
	.bottom.lockout configure -foreground black
	}
	pack .bottom.lockout
    }
}

proc toggle_node node {
    global lockout_val

    if {$lockout_val} {
        set response [powerlib::check $node on]
        if {[lsearch -exact $response $node] < 0} {
            powerlib::power $node on
        } else {
            powerlib::power $node off
        }
    }
}

proc make_console node {
    exec xterm -T $node -n $node -e conman -j $node &
}

proc check_all {} {
    global lib_dir
    global image_off
    global image_on

    set response [powerlib::check $powerlib::nodes on]
    foreach node $powerlib::nodes {
        set rack $powerlib::location($node)
	if {[lsearch -exact $response $node] < 0} {
            .middle.$rack.nf($node).control configure -image $image_off($node)
	    .middle.$rack.nf($node).name configure -foreground red
	} else {
            .middle.$rack.nf($node).control configure -image $image_on($node)
	    .middle.$rack.nf($node).name configure -foreground black
	}
	pack .middle.$rack.nf($node).control .middle.$rack.nf($node).name .middle.$rack.nf($node) .middle.$rack
    }
    pack .middle
    after 1000 check_all
}

proc all_on {} {
  global lockout_val

  if {$lockout_val} {
    powerlib::power $powerlib::nodes on
  }
}

proc all_off {} {
  global lockout_val

  if {$lockout_val} {
    powerlib::power $powerlib::nodes off
  }
}

proc all_reset {} {
  global lockout_val

  if {$lockout_val} {
    powerlib::power $powerlib::nodes reset
  }
}

proc check_consoles {} {
  global lockout_val

  if {$lockout_val} {
    set console_status [eval exec $app::lib_dir/wtf.exp -j $powerlib::nodes]
#    pack forget .middle
    foreach line $console_status {
	set node [string range $line 0 [expr [string first ":" $line] - 1]]
	set stat [string range $line [expr [string first ":" $line] + 1] end]
        set rack $powerlib::location($node)
#	pack forget .middle.$rack.nf($node).consolee .middle.$rack.nf($node) .middle.$rack
	switch $stat {
	    "unknown" {
		.middle.$rack.nf($node).console configure -image $image::unknown
	    }
	    "inactive" {
		.middle.$rack.nf($node).console configure -image $image::inactive
	    }
	    "rmc" {
		.middle.$rack.nf($node).console configure -image $image::rmc
	    }
	    "srm" {
		.middle.$rack.nf($node).console configure -image $image::srm
	    }
	    "login" {
		.middle.$rack.nf($node).console configure -image $image::login
	    }
	    "active" {
		.middle.$rack.nf($node).console configure -image $image::active
	    }
	    "shell" {
		.middle.$rack.nf($node).console configure -image $image::shell
	    }
	    "error" {
		.middle.$rack.nf($node).console configure -image $image::error
	    }
	    default {
		.middle.$rack.nf($node).console configure -image $image::console
	    }
	}
#	pack .middle.$rack.nf($node).consolee .middle.$rack.nf($node) .middle.$rack

    }
#    pack .middle
  }
}

####################################################################
# Main Routine
# 
####################################################################

if { [exec id -u] } {
    set unlockable 0
} else {
    set unlockable 1
}

# This namespace is for variables that must be set here but are mainly 
# used in the library.
namespace eval app {}
# This namespace if for gathering up all the images (duh)
namespace eval image {}

# This is a flag to tell the library to avoid sourcing the expect
# libraries, since "fork" interacts badly between expect and tk.
# Elsewhere it is used to suppress the future scheduling of the 
# "on" half of a "reset" cycle if the powerlib library is being 
# called from a serial (as opposed to event loop based) application. 
set app::tkdanger 1

set app::config_file "/etc/powerman.conf"
if {[info exists env(POWERMANCONF)]} {
    set app::config_file $env(POWERMANCONF)
}
set app::lib_dir "/usr/lib/powerman"
if {[info exists env(POWERMANLIBDIR)]} {
    set app::lib_dir $env(POWERMANLIBDIR)
}
set app::debug 0
set app::verbose 0
for {set i 0} {$i < $argc} {incr i} {
  switch -- [lindex $argv $i] {
      "-c" { 
	  incr i
	  set app::config_file [lindex $argv $i]
      }
      "-d" {
	set app::debug 1
	}
      "-l" { 
	  incr i
	  set app::lib_dir [lindex $argv $i]
      }
      "-v" {
	set app::verbose 1
	}
      default {
	usage [format "Unrecognized argument: %s" [lindex $argv $i]]
      }
  }
}

if {![file exists $app::config_file]} {
   usage "Can't find config file $app::config_file"
}

set powerlib [format "%s/powerlib.tcl" $app::lib_dir]
if {[file exists $powerlib]} {
    source $powerlib
} else {
    usage "Can't find $powerlib library"
}

set response [powerlib::check $powerlib::nodes "on"]

frame .top
button .top.all_on -text "All On" -command all_on
button .top.all_off -text "All Off" -command all_off
button .top.all_reset -text "All Reset" -command all_reset
button .top.check_consoles -text "Check Consoles" -command check_consoles
pack .top.all_on .top.all_off .top.all_reset .top.check_consoles -side left
pack .top

frame .middle
foreach rack $powerlib::locations {
  frame .middle.$rack
}

set use_gif "$app::lib_dir/console.gif"
if {[file exists $use_gif]} {
  set image::console [image create photo -format gif -file $use_gif]
} else {
  set image::console ""
}
set use_gif "$app::lib_dir/unknown.gif"
if {[file exists $use_gif]} {
  set image::unknown [image create photo -format gif -file $use_gif]
} else {
  set image::unknown ""
}
set use_gif "$app::lib_dir/inactive.gif"
if {[file exists $use_gif]} {
  set image::inactive [image create photo -format gif -file $use_gif]
} else {
  set image::inactive ""
}
set use_gif "$app::lib_dir/rmc.gif"
if {[file exists $use_gif]} {
  set image::rmc [image create photo -format gif -file $use_gif]
} else {
  set image::rmc ""
}
set use_gif "$app::lib_dir/srm.gif"
if {[file exists $use_gif]} {
  set image::srm [image create photo -format gif -file $use_gif]
} else {
  set image::srm ""
}
set use_gif "$app::lib_dir/login.gif"
if {[file exists $use_gif]} {
  set image::login [image create photo -format gif -file $use_gif]
} else {
  set image::login ""
}
set use_gif "$app::lib_dir/active.gif"
if {[file exists $use_gif]} {
  set image::active [image create photo -format gif -file $use_gif]
} else {
  set image::active ""
}
set use_gif "$app::lib_dir/shell.gif"
if {[file exists $use_gif]} {
  set image::shell [image create photo -format gif -file $use_gif]
} else {
  set image::shell ""
}
set use_gif "$app::lib_dir/error.gif"
if {[file exists $use_gif]} {
  set image::error [image create photo -format gif -file $use_gif]
} else {
  set image::error ""
}

foreach node $powerlib::nodes {
    set use_gif [lindex $powerlib::gifs($node) 1]
    if {[file exists $app::lib_dir/$use_gif]} {
      set image_off($node) [image create photo -format gif -file $app::lib_dir/$use_gif]
    } else {
      set image_off($node) ""
    }
    set use_gif [lindex $powerlib::gifs($node) 0]
    if {[file exists $app::lib_dir/$use_gif]} {
      set image_on($node) [image create photo -format gif -file $app::lib_dir/$use_gif]
    } else {
      set image_on($node) ""
    }
    if {[lsearch -exact $response $node] < 0} {
      set image $image_off($node)
    } else {
      set image $image_on($node)
    }

    set rack $powerlib::location($node)
    frame .middle.$rack.nf($node)
    label .middle.$rack.nf($node).name -text "$node"
    button .middle.$rack.nf($node).control  -text "$node" -image $image -command "toggle_node $node"
    button .middle.$rack.nf($node).console -text "Console" -image $image::console -command "make_console $node"
    pack .middle.$rack.nf($node).name -side left -expand 1 -anchor w
    pack .middle.$rack.nf($node).control .middle.$rack.nf($node).console -side left
    pack .middle.$rack.nf($node) -fill x
}

foreach rack $powerlib::locations {
  pack .middle.$rack -side left
}
pack .middle

set lockout_val $unlockable
frame .bottom
button .bottom.lockout -text "unlocked" -command toggle_lockout
if {$lockout_val} {
  .bottom.lockout configure -text "unlocked"
  .bottom.lockout configure -foreground red
} else {
  .bottom.lockout configure -text "locked"
  .bottom.lockout configure -foreground black
}

button .bottom.done -text "done" -command exit
pack .bottom.lockout  .bottom.done -side left
pack .bottom

after 1000 check_all


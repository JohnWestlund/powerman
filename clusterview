#!/usr/bin/expectk -f
# clusterview [file]
# This program probably still needs one new features:
#   The configuration file should mention the name of on and
#     off "gif" files, if any, and the code should allow that 
#     they don't exist

# Global initializations can only take place at the root context.  
# Procs can access globals but can not create and pass them up.

set config_file "/etc/powerman.conf"
if {[info exists env(POWERMANCONF)]} {
    set config_file $env(POWERMANCONF)
}
set lib_dir "/usr/lib/powerman"
if {[info exists env(POWERMANLIBDIR)]} {
    set lib_dir $env(POWERMANLIBDIR)
}
set configed 0
set debug 0
set verbose 0
set tkdanger 1
if {$argc > 0} {
    set config_file [lindex $argv 0]
}

if {!$configed} {
    if {[file exists $config_file]} {
	source $config_file
    } else {
	usage "Can't find config file $config_file"
    }
}
set powerlib [format "%s/powerlib.tcl" $lib_dir]
if {[file exists $powerlib]} {
    source $powerlib
} else {
    usage "Can't find $powerlib library"
}

# Assemble the list of nodes in the cluster

set nodes [list_nodes]
if {[llength $nodes] < 1} {usage "I don't see any nodes"}
set response [check $nodes on]
set lockout_val 1

frame .top
button .top.all_on -text "All On" -command all_on
button .top.all_off -text "All Off" -command all_off
button .top.all_reset -text "All Reset" -command all_reset
pack .top.all_on .top.all_off .top.all_reset -side left
pack .top

foreach node_struct $cluster {
    set node [lindex $node_struct 0]
    set use_gif [lindex $node_struct 4]
    if {[file exists $lib_dir/$use_gif]} {
      set image_off($node) [image create photo -format gif -file $lib_dir/$use_gif]
    } else {
      set image_off($node) ""
    }
    set use_gif [lindex $node_struct 3]
    if {[file exists $lib_dir/$use_gif]} {
      set image_on($node) [image create photo -format gif -file $lib_dir/$use_gif]
    } else {
      set image_on($node) ""
    }
    if {[lsearch -exact $response $node] < 0} {
      set image $image_off($node)
    } else {
      set image $image_on($node)
    }
    set use_gif "$lib_dir/console.gif"
    if {[file exists $use_gif]} {
      set console_image [image create photo -format gif -file $use_gif]
    } else {
      set console_image ""
    }

    frame .nf($node)
    label .nf($node).name -text "$node"
    button .nf($node).control  -text "$node" -image $image -command "toggle_node $node"
    button .nf($node).console -text "Console" -image $console_image -command "make_console $node"
    pack .nf($node).name -side left -expand 1 -anchor w
    pack .nf($node).control .nf($node).console -side left
    pack .nf($node) -fill x
}

frame .bottom
button .bottom.lockout -text "unlocked" -command toggle_lockout
if {$lockout_val} {
  .bottom.lockout configure -text "unlocked"
  .bottom.lockout configure -foreground red
} else {
  .bottom.lockout configure -text "locked"
  .bottom.lockout configure -foreground black
}

button .bottom.done -text "done" -command exit
pack .bottom.lockout  .bottom.done -side left
pack .bottom

after 1000 check_all

proc usage msg {
  global argv0
  puts "usage: $argv0 \[file\]"
  puts "file   = load file as config file"
  puts $msg
  exit
}

proc toggle_lockout {} {
    global lockout_val

    set lockout_val [expr 1 - $lockout_val]
    if {$lockout_val} {
      .bottom.lockout configure -text "unlocked"
      .bottom.lockout configure -foreground red
    } else {
      .bottom.lockout configure -text "locked"
      .bottom.lockout configure -foreground black
    }
    pack .bottom.lockout
}

proc toggle_node a_node {
    global nodes
    global lockout_val

    if {$lockout_val} {
        set response [check $nodes on]
        if {[lsearch -exact $response $a_node] < 0} {
            power $a_node on
#            puts "power $a_node on"
        } else {
            power $a_node off
#            puts "power $a_node off"
        }
    }
#  after 1000 check_all 
}

proc make_console a_node {
    exec xterm -T $a_node -n $a_node -e conman -j $a_node &
}

proc check_all {} {
    global nodes
    global cluster
    global lib_dir
    global image_off
    global image_on

    set response [check $nodes on]
    foreach node_struct $cluster {
        set node [lindex $node_struct 0]
	if {[lsearch -exact $response $node] < 0} {
            .nf($node).control configure -image $image_off($node)
	    .nf($node).name configure -foreground red
	} else {
            .nf($node).control configure -image $image_on($node)
	    .nf($node).name configure -foreground black
	}
	pack .nf($node).control .nf($node).name .nf($node)
    }
    after 1000 check_all
}

proc all_on {} {
  global nodes
  global lockout_val

  if {$lockout_val} {
    power $nodes on
  }
}

proc all_off {} {
  global nodes
  global lockout_val

  if {$lockout_val} {
    power $nodes off
  }
}

proc all_reset {} {
  global nodes
  global lockout_val

  if {$lockout_val} {
    power $nodes reset
  }
}


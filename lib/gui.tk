####################################################################
# $Id$
# by Andrew C. Uselton <uselton2@llnl.gov> 
# Copyright (C) 2000 Regents of the University of California
# See ../DISCLAIMER
# v. 0-0-3:  2001-07-31
#            First version of gui.tk in powerman
####################################################################
#  It looks like there may be a bug in handling the prefs dialog.
# Trying to get at it a second time caused an error.  This after first
# setting "pref_2" to "yes".
#
namespace eval gui {
    variable mode "panel"
    variable toplevel        .
    variable mbar            
    variable mbar_file       
    variable mbar_file_menu  
    variable mbar_edit       
    variable mbar_edit_menu  
    variable mbar_view       
    variable mbar_view_menu  
    variable mbar_help       
    variable mbar_help_menu  
    variable cvcan           
    variable startup
    variable prefs_index
    variable fixed_index
    variable bg_index
    variable delay_index
# The r, g, and b values of the selected background
    variable bg_r
    variable bg_g
    variable bg_b
# Other preference controlled values
    variable font_index
    variable font_family helvetica
    variable current_font {helvb18dgr 11 normal}
    variable font_desc
    variable font_list
    variable size_index
    variable font_size 11
    variable size_list
    variable style_index
    variable font_style normal
    variable style_list

    set namespace "::gui"
    if {$::app::debug} {puts "$namespace"}

    # The size of the screen in pixels
    namespace eval Screen {
	variable Width
	variable Height
	
	set namespace "::gui::Screen"
	if {$::app::debug} {puts "$namespace"}
	set Width  [winfo screenwidth  .]
	set Height [winfo screenheight .]
    }
    
    # Set the window to be approximately centered
    namespace eval Window {
	variable InitLeft
	variable InitTop
	variable InitWidth
	variable InitHeight
	variable Geometry
	
	set namespace "::gui::Window"
	if {$::app::debug} {puts "$namespace"}
	set InitLeft      [expr int($::gui::Screen::Width/8)]
	set InitTop       [expr int ($::gui::Screen::Height/8)]
	set InitWidth     [expr 6*$InitLeft]
	set InitHeight    [expr 6*$InitTop]
	set Geometry [format "%dx%d+%d+%d" \
		$InitWidth $InitHeight $InitLeft $InitTop]
    }
    
    
    namespace eval Canvas {
	variable Width
	variable Height
	
	set namespace "::gui::Canvas"
	if {$::app::debug} {puts "$namespace"}
    }
    
    namespace eval Viewport {
	variable Height
	variable Width
	variable TopOff
	variable LeftOff
	variable fixed

	set namespace "::gui::Viewport"
	if {$::app::debug} {puts "$namespace"}
    }
	
    proc init {} {
	variable mode
	variable toplevel        
	variable mbar            
	variable mbar_file       
	variable mbar_file_menu  
	variable mbar_edit       
	variable mbar_edit_menu  
	variable mbar_view       
	variable mbar_view_menu  
	variable mbar_help       
	variable mbar_help_menu  
	variable cvcan           
	variable startup
	# The r, g, and b values of the selected background
	variable bg_r
	variable bg_g
	variable bg_b
	# Other preference controlled values
	
	set proc "::gui::init"
	if {$::app::debug} {puts "$proc"}

	set panellib [format "%s/panel.tk" $::app::lib_dir]
	if {![file exists $panellib]} {
	    ::app::usage "Can't find $panellib library"
	}
	source $panellib

	set racklib [format "%s/rack.tk" $::app::lib_dir]
	if {![file exists $racklib]} {
	    ::app::usage "Can't find $racklib library"
	}
	source $racklib

# These aren't in sepatate files yet, since they're just stubs right now/
#	set setslib [format "%s/sets.tk" $::app::lib_dir]
#	if {![file exists $setslib]} {
#	    ::app::usage "Can't find $setslib library"
#	}
#	source $setslib

#	set activitylib [format "%s/activity.tk" $::app::lib_dir]
#	if {![file exists $activitylib]} {
#	    ::app::usage "Can't find $activitylib library"
#	}
#	source $activitylib

#	set playlib [format "%s/play.tk" $::app::lib_dir]
#	if {![file exists $playlib]} {
#	    ::app::usage "Can't find $playlib library"
#	}
#	source $playlib

	if {![info exists bg_r]}  {set bg_r 128}
	if {![info exists bg_g]}  {set bg_g 128}
	if {![info exists bg_b]}  {set bg_b 128}

	wm geometry . $Window::Geometry
	wm title    . "cv"

	set mbar [frame .mbar -relief raised -bd 2]
	pack .mbar -side top -fill x

	set mbar_file [menubutton .mbar.file -text File -underline 0 \
		-menu .mbar.file.menu]
	set mbar_edit [menubutton .mbar.edit -text Edit -underline 0 \
		-menu .mbar.edit.menu]
	set mbar_view [menubutton .mbar.view -text View -underline 0 \
		-menu .mbar.view.menu]
	set mbar_help [menubutton .mbar.help -text Help -underline 0 \
		-menu .mbar.help.menu]
	pack .mbar.file .mbar.edit .mbar.view -side left
	pack .mbar.help -side right

	set mbar_file_menu [menu .mbar.file.menu]
	.mbar.file.menu add command -label "New" 
	.mbar.file.menu add command -label "Open"
	.mbar.file.menu add command -label "Save"
	.mbar.file.menu add command -label "Save As"
	.mbar.file.menu add command -label "Print"
	.mbar.file.menu add command -label "Exit" -command exit

	set mbar_edit_menu [menu .mbar.edit.menu]
	.mbar.edit.menu add command -label "Select"
	.mbar.edit.menu add command -label "Global Preferences" \
		-command ::gui::preferences
	.mbar.edit.menu add command -label "View Mode Prefs" \
		-command ::gui::[set mode]::preferences

	set mbar_view_menu [menu .mbar.view.menu]
	.mbar.view.menu add command -label "rack" \
		-command {::gui::change "rack"}
	.mbar.view.menu add command -label "panel" \
		-command {::gui::change "panel"}
	.mbar.view.menu add command -label "sets" \
		-command {::gui::change "sets"}
	.mbar.view.menu add command -label "activity" \
		-command {::gui::change "activity"}
	.mbar.view.menu add command -label "play" \
		-command {::gui::change "play"}
	
	set mbar_help_menu [menu .mbar.help.menu]
	.mbar.help.menu add command -label "About"
	.mbar.help.menu add command -label "Reference"
	.mbar.help.menu add command -label "Release Notes"

	set hex_color [format "\#%02x%02x%02x" $bg_r $bg_g $bg_b]
	canvas .cvcan -background $hex_color
	pack .cvcan -fill both -expand 1
	
	set ::gui::Canvas::Height  [winfo height .cvcan]
	set ::gui::Canvas::Width   [winfo width  .cvcan]
	set ::gui::Viewport::Height $::gui::Canvas::Height
	set ::gui::Viewport::Width  $::gui::Canvas::Width
	set ::gui::Viewport::TopOff  0
	set ::gui::Viewport::LeftOff 0
	set ::gui::Viewport::fixed   0
	set startup 1

	scrollbar .updown -jump 1 -command ::gui::updown
	scrollbar .leftright -jump 1 -orient horizontal \
		-command ::gui::leftright

	bind .cvcan <Configure> {::gui::resize .cvcan %w %h}
	
	focus .cvcan
    }
    # end of "proc init"

    proc change {new_mode} {
	variable mode

	switch $mode {
		"rack"     {::gui::rack::fini}
		"panel"    {::gui::panel::fini}
		"sets"     {::gui::sets::fini}
		"activity" {::gui::activity::fini}
		"play"     {::gui::play::fini}
	}
	.mbar.edit.menu delete last
	set mode $new_mode
	.mbar.edit.menu add command -label "View Mode Prefs" \
		-command ::gui::[set mode]::preferences
	switch $mode {
		"rack"     {::gui::rack::init}
		"panel"    {::gui::panel::init}
		"sets"     {::gui::sets::init}
		"activity" {::gui::activity::init}
		"play"     {::gui::play::init}
	}
    }

    proc resize {c w h} {
	variable startup
	variable mode

	set proc "::gui::resize"
	if {$::app::debug} {puts "$proc"}

	set startup 0
	if {$::gui::Viewport::fixed} {
	    # adjust scrollbars 
	    set excessH [expr $h + $Viewport::TopOff  - $Viewport::Height]
	    set excessW [expr $w + $Viewport::LeftOff - $Viewport::Width]
	    set Canvas::Height $h
	    set Canvas::Width  $w    
	    if {$excessH > 0.0} {
		::gui::updown [expr -$excessH]
	    }
	    if {$excessW > 0.0} {
		::gui::leftright [expr -$excessW]
	    }
	    .updown set [expr $Viewport::TopOff/double($Viewport::Height)] \
		    [expr ($Viewport::TopOff + $Canvas::Height) \
		    /double($Viewport::Height)]
	    .leftright set [expr $Viewport::LeftOff/double($Viewport::Width)] \
		    [expr ($Viewport::LeftOff + $Canvas::Width) \
		    /double($Viewport::Width)]
	} else {
	    set ::gui::Canvas::Width    $w
	    set ::gui::Canvas::Height   $h
	    set ::gui::Viewport::Width  $w
	    set ::gui::Viewport::Height $h
	    switch $mode {
		"rack"     {::gui::rack::init}
		"panel"     {::gui::panel::init}
		"sets"      {::gui::sets::init}
		"activity"  {::gui::activity::init}
		"play"      {::gui::play::init}
	    }
	    # resize tiles to fit screen
	}
    }

    proc preferences {} {
# To add a new preference to the list it requires you to coordinate 
# things in several places and make sure they are consistent:
# 1)  Add three lines here that set the new prefernce intry in the
#       listbox, it's index, and increment the pref_index
# 2)  Add the ::gui globals here and/or above for any parameters controlled
#       by the preference as well as its index
# 3)  Add a line to the procedure ::gui::alt_pref dispatching to the 
#       procedure ::gui::make_the_pref
# 4)  Add functions implementing the proc ::gui::make_the_pref
# 5)  Add whatever code is neede to proc init
# 6)  Add whatever code is needed to proc prefs_done
	variable prefs_index
	variable fixed_index
	variable bg_index
	variable font_index
	variable delay_index

	set proc "::gui::prfernces"
	if {$::app::debug} {puts "$proc"}

	if {![winfo exists .prefs]} {
	    set prefs [toplevel .prefs]
	    set x [expr [winfo rootx .] + [winfo width .] /5]
	    set y [expr [winfo rooty .] + [winfo height .] /5]
	    wm geometry .prefs +$x+$y
	    frame .prefs.scroll_list
	    listbox .prefs.scroll_list.list -height 5 -selectmode single \
		    -width 0 -yscrollcommand ".prefs.scroll_list.scroll set"
	    scrollbar .prefs.scroll_list.scroll  \
		    -command ".prefs.scroll_list.list yview"
	    set prefs_index 0
	    .prefs.scroll_list.list insert end "fixed viewport"
	    set fixed_index $prefs_index
	    incr prefs_index
	    
	    .prefs.scroll_list.list insert end "background"
	    set bg_index $prefs_index
	    incr prefs_index
	    
	    .prefs.scroll_list.list insert end "font"
	    set font_index $prefs_index
	    incr prefs_index
	    
	    .prefs.scroll_list.list insert end "delay"
	    set delay_index $prefs_index
	    incr prefs_index
	    
	    pack .prefs.scroll_list.list -side left
	    pack .prefs.scroll_list.scroll -side right -fill y
	    pack .prefs.scroll_list -side left
	    
	    frame .prefs.expl
	    
	    frame .prefs.expl.done_frame
	    button .prefs.expl.done_frame.done -text "done" \
		    -command ::gui::prefs_done
	    pack .prefs.expl.done_frame.done -side top -fill x -expand 1
	    pack .prefs.expl.done_frame
	    
	    ::gui::make_fixed_pref 
	    
	    pack .prefs.expl -side right
	    bind .prefs.scroll_list.list <Button-1> {
		::gui::alt_pref [.prefs.scroll_list.list nearest %y]
	    }
	}
	focus .prefs
    }

    proc alt_pref {el} {
	set proc "::gui::alt_pref"
	if {$::app::debug} {puts "$proc"}

	switch $el  {
	    0  {::gui::make_fixed_pref}
	    1  {::gui::make_background}
	    2  {::gui::make_font}
	    3  {::gui::make_delay}
	}
    }

    proc make_fixed_pref {} {
	variable fixed_index
	variable prefs_index

	set proc "::gui::make_fixed_pref"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals
	destroy .prefs.expl.text_frame

	frame .prefs.expl.vals
	radiobutton .prefs.expl.vals.yes -text "yes" \
		-variable ::gui::Viewport::fixed -value 1 -anchor n
	radiobutton .prefs.expl.vals.no -text "no" \
		-variable ::gui::Viewport::fixed -value 0 -anchor n
	pack .prefs.expl.vals.yes .prefs.expl.vals.no -side left \
		-fill x -expand 1
	pack .prefs.expl.vals -side top -fill x -expand 1 \
		-before .prefs.expl.done_frame

	frame .prefs.expl.text_frame 
	text .prefs.expl.text_frame.text -wrap word -height 5 -width 40\
		-yscrollcommand ".prefs.expl.text_frame.scroll set"
	scrollbar .prefs.expl.text_frame.scroll \
		-command ".prefs.expl.text_frame.text yview"
	pack .prefs.expl.text_frame.text -side left
	pack .prefs.expl.text_frame.scroll -side right -fill y
	.prefs.expl.text_frame.text delete 1.0 end
	.prefs.expl.text_frame.text insert end \
		[format "%s%s%s%s" \
		"If \"fixed\" is set to \"yes\" then scrollbars will " \
		"appear, and the size of the panel tiles will remain " \
		"fixed when the window is resized.  If \"no\" then "   \
		"resizing the window will resize the tiles."]
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame

	bind .prefs.expl.vals.yes <Button-1> {
	    ::gui::set_fixed
	}
	bind .prefs.expl.vals.no <Button-1> {
	    ::gui::clear_fixed
	}
    }

    proc set_fixed {} {
	set ::gui::Viewport::fixed 1
	pack forget .updown .leftright .cvcan
	pack .updown -side right -fill y
	pack .leftright -side bottom -fill x
	pack .cvcan -fill both -expand 1
	.updown set [expr $Viewport::TopOff/double($Viewport::Height)] \
		[expr ($Viewport::TopOff + $Canvas::Height) /double($Viewport::Height)]
	.leftright set [expr $Viewport::LeftOff/double($Viewport::Width)] \
		[expr ($Viewport::LeftOff + $Canvas::Width) /double($Viewport::Width)]
#set the current Viewport dimensions as the maximum allowed.
	wm maxsize . [winfo width .] [winfo height .]

    }

    proc clear_fixed {} {
	set ::gui::Viewport::fixed 0
	pack forget .updown .leftright
	wm maxsize . $Screen::Width $Screen::Height
	set Viewport::TopOff 0
	set Viewport::LeftOff 0
    }

    proc make_background {} {
	variable bg_index
	variable prefs_index
	variable bg_r
	variable bg_g
	variable bg_b

	set proc "::gui::make_background"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals

	frame .prefs.expl.vals
# This should be three slides 0 .. 255 for colors
	scale .prefs.expl.vals.r  -from 0 -to 255 -label "R" -showvalue 1 \
		-variable ::gui::Viewport::bg_r \
		-command {::gui::set_bg "r"}
	scale .prefs.expl.vals.g  -from 0 -to 255 -label "G" -showvalue 1 \
		-variable ::gui::Viewport::bg_g \
		-command {::gui::set_bg "g"}
	scale .prefs.expl.vals.b  -from 0 -to 255 -label "B" -showvalue 1 \
		-variable ::gui::Viewport::bg_b \
		-command {::gui::set_bg "b"}
	.prefs.expl.vals.r set $bg_r
	.prefs.expl.vals.g set $bg_g
	.prefs.expl.vals.b set $bg_b
	pack .prefs.expl.vals.r .prefs.expl.vals.g .prefs.expl.vals.b \
		-side left -fill x -expand 1
	pack .prefs.expl.vals -side top -fill x -expand 1 \
		-before .prefs.expl.done_frame
    }

    proc set_bg {color val} {
	variable bg_r
	variable bg_g
	variable bg_b

	destroy .prefs.expl.text_frame
	switch $color {
	    "r" {set bg_r $val}
	    "g" {set bg_g $val}
	    "b" {set bg_b $val}
	}
	set hex_color [format "\#%02x%02x%02x" $bg_r $bg_g $bg_b]
	message .prefs.expl.text_frame -aspect 4000 -width 4000 \
		-background $hex_color \
		-text "Background color for panel"
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame \
		-fill x -expand 1
    }

    proc make_font {} {
	variable prefs_index
	variable font_index
	variable font_list
	variable font_family
	variable current_font
	variable font_desc
	variable size_index
	variable font_size
	variable size_list
	variable style_index
	variable font_style
	variable style_list

	set proc "::gui::make_font"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals
	destroy .prefs.expl.text_frame
	if {[info exists font_list]} {
	    unset font_list
	}

	frame .prefs.expl.vals

	frame .prefs.expl.vals.font
	listbox .prefs.expl.vals.font.list -height 5 -selectmode single \
		-width 0 -yscrollcommand ".prefs.expl.vals.font.scroll set"
	scrollbar .prefs.expl.vals.font.scroll  \
		-command ".prefs.expl.vals.font.list yview"
	set font_index 0
	.prefs.expl.vals.font.list insert end $font_family
	set font_list($font_index) $current_font
	incr font_index

	foreach f [font families] {
	    .prefs.expl.vals.font.list insert end $f
	    set font_list($font_index) $f
	    incr font_index
	}
	
	bind .prefs.expl.vals.font.list <Button-1> {
	    set ::gui::font_family $::gui::font_list([.prefs.expl.vals.font.list nearest %y])
	    set ::gui::current_font [list $::gui::font_family [expr -$::gui::font_size] $::gui::font_style]
	}

	pack .prefs.expl.vals.font.list -side left
	pack .prefs.expl.vals.font.scroll -side right -fill y
	pack .prefs.expl.vals.font -side left

# End of font start of size

	frame .prefs.expl.vals.size
	listbox .prefs.expl.vals.size.list -height 5 -selectmode single \
		-width 0 -yscrollcommand ".prefs.expl.vals.size.scroll set"
	scrollbar .prefs.expl.vals.size.scroll  \
		-command ".prefs.expl.vals.size.list yview"
	set size_index 0
	.prefs.expl.vals.size.list insert end $font_size
	set size_list($size_index) $font_size
	incr size_index

	foreach s [list 5 6 8 9 10 11 12 14 18 24 36 48] {
	    .prefs.expl.vals.size.list insert end $s
	    set size_list($size_index) $s
	    incr size_index
	}
	
	bind .prefs.expl.vals.size.list <Button-1> {
	    set ::gui::font_size $::gui::size_list([.prefs.expl.vals.size.list nearest %y])
	    set ::gui::current_font [list $::gui::font_family [expr -$::gui::font_size] $::gui::font_style]
	}

	pack .prefs.expl.vals.size.list -side left
	pack .prefs.expl.vals.size.scroll -side right -fill y
	pack .prefs.expl.vals.size -side left

# End of size start of style

	frame .prefs.expl.vals.style
	listbox .prefs.expl.vals.style.list -height 5 -selectmode single \
		-width 0 -yscrollcommand ".prefs.expl.vals.style.scroll set"
	scrollbar .prefs.expl.vals.style.scroll  \
		-command ".prefs.expl.vals.style.list yview"
	set style_index 0
	.prefs.expl.vals.style.list insert end $font_style
	set style_list($style_index) $font_style
	incr style_index

	foreach s [list normal bold roman italic underline overstrike] {
	    .prefs.expl.vals.style.list insert end $s
	    set style_list($style_index) $s
	    incr style_index
	}
	
	bind .prefs.expl.vals.style.list <Button-1> {
	    set ::gui::font_style $::gui::style_list([.prefs.expl.vals.style.list nearest %y])
	    set ::gui::current_font [list $::gui::font_family [expr -$::gui::font_size] $::gui::font_style]
	}

	pack .prefs.expl.vals.style.list -side left
	pack .prefs.expl.vals.style.scroll -side right -fill y
	pack .prefs.expl.vals.style -side left

# end of style

	pack .prefs.expl.vals -before .prefs.expl.done_frame

	message .prefs.expl.text_frame -aspect 4000 -width 4000 \
		-text "Select a font"
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame

    }

    proc make_delay {} {
	variable prefs_index
	variable delay_index

	set delay_val [format "%d" $::app::delay]
	set proc "::gui::make_delay"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals
	destroy .prefs.expl.text_frame

	frame .prefs.expl.vals

	label .prefs.expl.vals.label -text "dealy in ms"
	entry .prefs.expl.vals.delay  -width 10 \
		-textvariable delay_val
	.prefs.expl.vals.delay delete 0 end
	.prefs.expl.vals.delay insert 0 $delay_val
	button .prefs.expl.vals.done -text "done" -command {
	    scan $delay_val "%d" ::app::delay 
	}
	pack .prefs.expl.vals.label .prefs.expl.vals.delay -side left -fill x
	pack .prefs.expl.vals -side top -fill x -expand 1 \
		-before .prefs.expl.done_frame
	message .prefs.expl.text_frame -aspect 4000 -width 4000 \
		-text "enter a value for delay"
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame \
		-fill x -expand 1
    }

    proc prefs_done {} {
	variable bg_r
	variable bg_g
	variable bg_b

	set proc "::gui::prefs_done"
	if {$::app::debug} {puts "$proc"}

	set hex_color [format "\#%02x%02x%02x" $bg_r $bg_g $bg_b]
	.cvcan configure -background $hex_color
	destroy .prefs
    }

    proc updown {args} {
	switch -- [lindex $args 0] {
	    "moveto" {
		set fraction [lindex $args 1]
		set number [expr $fraction * $Viewport::Height - \
			$Viewport::TopOff]
	    }
	    "scroll" {
		set number [lindex $args 1]
		switch -- [lindex $args 2] {
		    "units" {}
		    "pages" {
			set number [expr $number * $Canvas::Height]
		    }
		}
	    }
	    default {
		set number [lindex $args 0]
	    }
	}
	if { $Viewport::TopOff < [expr -$number]} {
	    set number [expr -$Viewport::TopOff]
	}
	set max [expr $Viewport::Height - $Canvas::Height]
	if { [expr $Viewport::TopOff + $number] > $max} {
	    set number [expr $max - $Viewport::TopOff]
	}
	set Viewport::TopOff [expr $Viewport::TopOff + $number]
	set first [expr $Viewport::TopOff/double($Viewport::Height)] 
	set last  [expr ($Viewport::TopOff + $Canvas::Height) \
		/double($Viewport::Height)]
	.updown set $first $last
	.cvcan move all 0.0 [expr -$number]
    }
    
    proc leftright {args} {
	switch -- [lindex $args 0] {
	    "moveto" {
		set fraction [lindex $args 1]
		set number [expr $fraction * $Viewport::Width - $Viewport::LeftOff]
	    }
	    "scroll" {
		set number [lindex $args 1]
		switch -- [lindex $args 2] {
		    "units" {}
		    "pages" {
			set number [expr $number * $Canvas::Height]
		    }
		}
	    }
	    default {
		set number [lindex $args 0]
	    }
	}
	if { $Viewport::LeftOff < [expr -$number]} {
	    set number [expr -$Viewport::LeftOff]
	}
	set max [expr $Viewport::Width - $Canvas::Width]
	if { [expr $Viewport::LeftOff + $number]> $max} {
	    set number [expr $max - $Viewport::LeftOff]
	}
	set Viewport::LeftOff [expr $Viewport::LeftOff + $number]
	set first [expr $Viewport::LeftOff/double($Viewport::Width)]
	set last [expr ($Viewport::LeftOff + $Canvas::Width) /double($Viewport::Width)]
	.leftright set $first $last
	.cvcan move all [expr -$number] 0.0
    }

    namespace eval sets {
	proc init {} {
	    variable mode
	    
	    set proc "::gui::sets::init"
	    if {$::app::debug} {puts "$proc"}
	    
	    set mode "sets"
	}
	# end of "proc init"
 
	proc fini {} {
	    .cvcan delete all
	}
    }
    # end of namespace sets

    namespace eval activity {
	proc init {} {
	    variable mode
	    
	    set proc "::gui::activity::init"
	    if {$::app::debug} {puts "$proc"}
	    
	    set mode "activity"
	}
	# end of "proc activity"
	
	proc fini {} {
	    .cvcan delete all
	}
    }
    # end of namespace activity

    namespace eval play {

	proc init {} {
	    variable mode
	    
	    set proc "::gui::play"
	    if {$::app::debug} {puts "$proc"}
	    
	    set mode "play"
	    
	    set w [expr $::gui::Canvas::Width/2]
	    set h [expr $::gui::Canvas::Height/2]
	    
	    if {$w < $h} {
		set size [expr $w/4]
	    } else {
		set size [expr $h/4]
	    }
	    
	    #wings
	    set wings [.cvcan create oval \
		    [expr $w-$size] \
		    [expr $h-(2*$size)] \
		    [expr $w+$size] \
		    $h \
		    -outline black -fill black -tags wings]
	    #tummy
	    set tummy [.cvcan create oval \
		    [expr $w-(0.8*$size)] \
		    [expr $h-(2*$size)] \
		    [expr $w+(0.8*$size)] \
		    $h \
		    -outline black -fill white -tags tummy]
	    #head
	    set head [.cvcan create oval \
		    [expr $w-(0.5*$size)] \
		    [expr $h-(3.0*$size)] \
		    [expr $w+(0.5*$size)] \
		    [expr $h-(2*$size)] \
		    -outline black -fill black -tags head]
	    #right foot (screen left)
	    set rfoot [.cvcan create oval \
		    [expr $w-$size] \
		    [expr $h-$size] \
		    $w \
		    $h \
		    -outline black -fill yellow -tags rfoot]
	    #left foot (screen right)
	    set lfoot [.cvcan create oval \
		    [expr $w] \
		    [expr $h-$size] \
		    [expr $w+$size] \
		    $h \
		    -outline black -fill yellow -tags lfoot]
	    #beak
	    set beak [.cvcan create oval \
		    [expr $w-(0.3*$size)] \
		    [expr $h-(2.5*$size)] \
		    [expr $w+(0.3*$size)] \
		    [expr $h-(2*$size)] \
		    -outline black -fill yellow -tags beak]
	    #right eye (screen left)
	    set reye [.cvcan create oval \
		    [expr $w-(0.4*$size)] \
		    [expr $h-(2.7*$size)] \
		    [expr $w-(0.1*$size)] \
		    [expr $h-(2.4*$size)] \
		    -outline black -fill white -tags reye]
	    #left eye (screen right)
	    set leye [.cvcan create oval \
		    [expr $w+(0.1*$size)] \
		    [expr $h-(2.7*$size)] \
		    [expr $w+(0.4*$size)] \
		    [expr $h-(2.4*$size)] \
		    -outline black -fill white -tags leye]
	    
	    set name "tux"
	    set label [.cvcan create text \
		    [expr $w+(0.8*$size)] \
		    [expr $h - (2*$size)] \
		    -text $name \
		    -font $::gui::current_font -fill black -anchor sw]
	    
	}
	# end of "proc play" 
	
	proc fini {} {
	    .cvcan delete all
	}
    }
    # end of namespace play
    
}
# end of "namespace eval gui"

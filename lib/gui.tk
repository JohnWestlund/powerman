####################################################################
# $Id$
# by Andrew C. Uselton <uselton2@llnl.gov> 
# Copyright (C) 2000 Regents of the University of California
# See ../DISCLAIMER
# v. 0-0-3:  2001-07-31
#            First version of gui.tk in powerman
####################################################################

namespace eval gui {
    variable mode "panel"
    variable toplevel        .
    variable mbar            
    variable mbar_file       
    variable mbar_file_menu  
    variable mbar_edit       
    variable mbar_edit_menu  
    variable mbar_view       
    variable mbar_view_menu  
    variable mbar_help       
    variable mbar_help_menu  
    variable cvcan           
    variable startup
    variable tile
    variable fixed_index
    variable pref_index_1
    variable pref_index_2

    set namespace "::gui"
    if {$::app::debug} {puts "$namespace"}

    # The size of the screen in pixels
    namespace eval Screen {
	variable Width
	variable Height
	
	set namespace "::gui::Screen"
	if {$::app::debug} {puts "$namespace"}
	set Width  [winfo screenwidth  .]
	set Height [winfo screenheight .]
    }
    
    # Set the window to be approximately centered
    namespace eval Window {
	variable InitLeft
	variable InitTop
	variable InitWidth
	variable InitHeight
	variable Geometry
	
	set namespace "::gui::Window"
	if {$::app::debug} {puts "$namespace"}
	set InitLeft      [expr int($::gui::Screen::Width/8)]
	set InitTop       [expr int ($::gui::Screen::Height/8)]
	set InitWidth     [expr 6*$InitLeft]
	set InitHeight    [expr 6*$InitTop]
	set Geometry [format "%dx%d+%d+%d" $InitWidth $InitHeight $InitLeft $InitTop]
    }
    
    
    namespace eval Canvas {
	variable Width
	variable Height
	
	set namespace "::gui::Canvas"
	if {$::app::debug} {puts "$namespace"}
    }
    
    namespace eval Viewport {
	variable Height
	variable Width
	variable TopOff
	variable LeftOff
	variable fixed

	set namespace "::gui::Viewport"
	if {$::app::debug} {puts "$namespace"}
    }
	
    proc init {} {
	variable mode
	variable toplevel        
	variable mbar            
	variable mbar_file       
	variable mbar_file_menu  
	variable mbar_edit       
	variable mbar_edit_menu  
	variable mbar_view       
	variable mbar_view_menu  
	variable mbar_help       
	variable mbar_help_menu  
	variable cvcan           
	variable startup

	set proc "::gui::init"
	if {$::app::debug} {puts "$proc"}

	wm geometry . $Window::Geometry
	wm title    . "cv"

	set mbar [frame .mbar -relief raised -bd 2]
	pack .mbar -side top -fill x

	set mbar_file [menubutton .mbar.file -text File -underline 0 \
		-menu .mbar.file.menu]
	set mbar_edit [menubutton .mbar.edit -text Edit -underline 0 \
		-menu .mbar.edit.menu]
	set mbar_view [menubutton .mbar.view -text View -underline 0 \
		-menu .mbar.view.menu]
	set mbar_help [menubutton .mbar.help -text Help -underline 0 \
		-menu .mbar.help.menu]
	pack .mbar.file .mbar.edit .mbar.view -side left
	pack .mbar.help -side right

	set mbar_file_menu [menu .mbar.file.menu]
	.mbar.file.menu add command -label "New" 
	.mbar.file.menu add command -label "Open"
	.mbar.file.menu add command -label "Save"
	.mbar.file.menu add command -label "Save As"
	.mbar.file.menu add command -label "Print"
	.mbar.file.menu add command -label "Exit" -command exit

	set mbar_edit_menu [menu .mbar.edit.menu]
	.mbar.edit.menu add command -label "Select"
	.mbar.edit.menu add command -label "Preferences" \
		-command ::gui::preferences

	set mbar_view_menu [menu .mbar.view.menu]
	.mbar.view.menu add command -label "panel" -command ::gui::panel
	.mbar.view.menu add command -label "sets"
	.mbar.view.menu add command -label "activity"
	.mbar.view.menu add command -label "play"
	
	set mbar_help_menu [menu .mbar.help.menu]
	.mbar.help.menu add command -label "About"
	.mbar.help.menu add command -label "Reference"
	.mbar.help.menu add command -label "Release Notes"

	set cvcan [canvas .cvcan -background grey]
	pack .cvcan -fill both -expand 1
	
	set ::gui::Canvas::Height  [winfo height .cvcan]
	set ::gui::Canvas::Width   [winfo width  .cvcan]
	set ::gui::Viewport::Height $::gui::Canvas::Height
	set ::gui::Viewport::Width  $::gui::Canvas::Width
	set ::gui::Viewport::fixed 0
	set startup 1

	bind .cvcan <Configure> {::gui::resize .cvcan %w %h}
	
	focus .cvcan
    }
    # end of "proc init"

    proc resize {c w h} {
	variable startup

	set proc "::gui::resize"
	if {$::app::debug} {puts "$proc"}

	set startup 0
	if {$::gui::Viewport::fixed} {
	    # adjust scrollbars 
	} else {
	    set ::gui::Canvas::Width    $w
	    set ::gui::Canvas::Height   $h
	    set ::gui::Viewport::Width  $w
	    set ::gui::Viewport::Height $h
	    ::gui::panel
	    # resize tiles to fit screen
	}
    }

    proc preferences {} {
	variable fixed
	variable fixed_index
	variable pref_index_1
	variable pref_index_2

	set proc "::gui::prfernces"
	if {$::app::debug} {puts "$proc"}

	set prefs [toplevel .prefs]

	frame .prefs.scroll_list
	listbox .prefs.scroll_list.list -height 5 -selectmode single -width 0 \
		-yscrollcommand ".prefs.scroll_list.scroll set"
	scrollbar .prefs.scroll_list.scroll  \
		-command ".prefs.scroll_list.list yview"
	set prefs_index 0
	.prefs.scroll_list.list insert end "fixed viewport"
	.prefs.scroll_list.list activate $prefs_index
	.prefs.scroll_list.list selection set $prefs_index
	set fixed_index $prefs_index
	incr prefs_index

	.prefs.scroll_list.list insert end "preference 1"
	set pref_index_1 $prefs_index
	incr prefs_index
	
	.prefs.scroll_list.list insert end "preference 2"
	set pref_index_2 $prefs_index
	incr prefs_index
	
	pack .prefs.scroll_list.list -side left
	pack .prefs.scroll_list.scroll -side right -fill y
	pack .prefs.scroll_list -side left

	frame .prefs.expl

	frame .prefs.expl.done_frame
	button .prefs.expl.done_frame.done -text "done" \
		-command ::gui::prefs_done
	pack .prefs.expl.done_frame.done -side top -fill x -expand 1
	button .prefs.expl.done_frame.switch -text "switch" -command {
	    ::gui::alt_pref .prefs.expl 1
	}
	pack .prefs.expl.done_frame.switch -side top -fill x -expand 1
	pack .prefs.expl.done_frame

	::gui::make_fixed_pref 

	pack .prefs.expl -side right
	bind .prefs.scroll_list.list <Button-1> {
	    ::gui::alt_pref [.prefs.scroll_list.list nearest %y]
	}
	focus $prefs
    }

    proc make_fixed_pref {} {
	variable fixed_index
	variable pref_index_1
	variable pref_index_2


	set proc "::gui::make_fixed_pref"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals
	destroy .prefs.expl.text_frame

	.prefs.scroll_list.list selection set $fixed_index
	.prefs.scroll_list.list activate $fixed_index
	frame .prefs.expl.vals
	radiobutton .prefs.expl.vals.yes -text "yes" \
		-variable ::gui::Viewport::fixed -value 1 -anchor n
	radiobutton .prefs.expl.vals.no -text "no" \
		-variable ::gui::Viewport::fixed -value 0 -anchor n
	pack .prefs.expl.vals.yes .prefs.expl.vals.no -side left \
		-fill x -expand 1
	pack .prefs.expl.vals -side top -fill x -expand 1 \
		-before .prefs.expl.done_frame

	frame .prefs.expl.text_frame 
	text .prefs.expl.text_frame.text -wrap word -height 5 -width 40\
		-yscrollcommand ".prefs.expl.text_frame.scroll set"
	scrollbar .prefs.expl.text_frame.scroll \
		-command ".prefs.expl.text_frame.text yview"
	pack .prefs.expl.text_frame.text -side left
	pack .prefs.expl.text_frame.scroll -side right -fill y
	.prefs.expl.text_frame.text delete 1.0 end
	.prefs.expl.text_frame.text insert end \
		[format "%s%s%s%s" \
		"If \"fixed\" is set to \"yes\" then scrollbars will " \
		"appear, and the size of the panel tiles will remain " \
		"fixed when the window is resized.  If \"no\" then "   \
		"resizing the window will resize the tiles."]
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame
    }

    proc make_pref_1 {} {
	variable fixed_index
	variable pref_index_1
	variable pref_index_2

	set proc "::gui::make_pref_1"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals
	destroy .prefs.expl.text_frame

	.prefs.scroll_list.list selection set $pref_index_1
	.prefs.scroll_list.list activate $pref_index_1
	frame .prefs.expl.vals
	radiobutton .prefs.expl.vals.yes -text "yes" \
		-variable ::gui::Viewport::fixed -value 1 -anchor n
	radiobutton .prefs.expl.vals.no -text "no" \
		-variable ::gui::Viewport::fixed -value 0 -anchor n
	pack .prefs.expl.vals.yes .prefs.expl.vals.no -side left \
		-fill x -expand 1
	pack .prefs.expl.vals -side top -fill x -expand 1 \
		-before .prefs.expl.done_frame

	frame .prefs.expl.text_frame 
	text .prefs.expl.text_frame.text -wrap word -height 5 -width 40\
		-yscrollcommand ".prefs.expl.text_frame.scroll set"
	scrollbar .prefs.expl.text_frame.scroll \
		-command ".prefs.expl.text_frame.text yview"
	pack .prefs.expl.text_frame.text -side left
	pack .prefs.expl.text_frame.scroll -side right -fill y
	.prefs.expl.text_frame.text delete 1.0 end
	.prefs.expl.text_frame.text insert end "This also changes \"fixed\"."
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame
    }

    proc make_pref_2 {} {
	variable fixed_index
	variable pref_index_1
	variable pref_index_2

	set proc "::gui::make_pref_2"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs.expl.vals
	destroy .prefs.expl.text_frame

	.prefs.scroll_list.list selection set $pref_index_2
	.prefs.scroll_list.list activate $pref_index_2
	frame .prefs.expl.vals
	radiobutton .prefs.expl.vals.yes -text "yes" \
		-variable ::gui::Viewport::fixed -value 1 -anchor n
	radiobutton .prefs.expl.vals.no -text "no" \
		-variable ::gui::Viewport::fixed -value 0 -anchor n
	pack .prefs.expl.vals.yes .prefs.expl.vals.no -side left \
		-fill x -expand 1
	pack .prefs.expl.vals -side top -fill x -expand 1 \
		-before .prefs.expl.done_frame

	frame .prefs.expl.text_frame 
	text .prefs.expl.text_frame.text -wrap word -height 5 -width 40\
		-yscrollcommand ".prefs.expl.text_frame.scroll set"
	scrollbar .prefs.expl.text_frame.scroll \
		-command ".prefs.expl.text_frame.text yview"
	pack .prefs.expl.text_frame.text -side left
	pack .prefs.expl.text_frame.scroll -side right -fill y
	.prefs.expl.text_frame.text delete 1.0 end
	.prefs.expl.text_frame.text insert end "This also changes \"fixed\"."
	pack .prefs.expl.text_frame -before .prefs.expl.done_frame
    }

    proc prefs_done {} {
	set proc "::gui::prefs_done"
	if {$::app::debug} {puts "$proc"}

	destroy .prefs
    }

    proc alt_pref {el} {
	variable fixed_index
	variable pref_index_1
	variable pref_index_2

	set proc "::gui::alt_pref"
	if {$::app::debug} {puts "$proc"}

	puts "selected element is $el"
	switch $el  {
	    0  {::gui::make_fixed_pref}
	    1 {::gui::make_pref_1}
	    2 {::gui::make_pref_2}
	}
    }

    proc panel {} {
	variable mode
	variable tile

	set proc "::gui::panel"
	if {$::app::debug} {puts "$proc"}

	set mode "panel"
	if {[info exists ::powerlib::cluster]} {
	    set total [llength $::powerlib::nodes]
	    set rows  [expr ceil(sqrt(double($total)))]
	    set cols  [expr ceil($total/double($rows))]
	    set width  [expr int($::gui::Viewport::Width/double($cols + 1))]
	    set height [expr int($::gui::Viewport::Height/double($rows + 1))]
	    if {$width > $height} {
		set width  $height
		set height $width
	    }
	    if {$::app::debug} {
		puts [format "%s%s" "rows = $rows, cols = $cols, " \
			"width = $width, height = $height"] 
	    }
	    set row 0
	    set col 0
	    if {[info exists tile]} {
		.cvcan delete tile
	    }
	    foreach node $::powerlib::nodes {
		set bound [expr $height/2]
		set gap   [expr $height/10]
		set b [expr $bound - $gap + ($row + 1) * $height]
		set t [expr $bound + $gap +  $row      * $height]
		set l [expr $bound + $gap +  $col      * $width ]
		set r [expr $bound - $gap + ($col + 1) * $width ]
		if {$::app::debug} {
		    puts "($col, $row) b = $b, t = $t, l = $l, r = $r"
		}
		set tile($node) [.cvcan create rectangle $l $t  \
			$r $b -outline black -fill grey -tags tile]
		set label($node) [format "%s" $node]
		incr col
		if {$col >= $cols} {
		    set col 0
		    incr row
		}
		    
	    }
	}
    }
    # end of "proc panel" 

    proc sets {} {
	variable mode

	set proc "::gui::sets"
	if {$::app::debug} {puts "$proc"}

	set mode "sets"
    }
    # end of "proc sets"
 
    proc activity {} {
	variable mode

	set proc "::gui::activity"
	if {$::app::debug} {puts "$proc"}

	set mode "activity"
    }
    # end of "proc activity"
 
    proc play {} {
	variable mode

	set proc "::gui::play"
	if {$::app::debug} {puts "$proc"}

	set mode "play"
    }
    # end of "proc play" 
}
# end of "namespace eval gui"

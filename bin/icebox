#!/usr/bin/env python
####################################################################
# $Id$
# by Andrew C. Uselton <uselton2@llnl.gov> 
# Copyright (C) 2000 Regents of the University of California
# See ./DISCLAIMER
# v. 0-1-6:  2001-09-07
#            Initial development for Ice Box.  N.B. Unlike all the
#            other low level modules, icebox is responsible for
#            both query and control interfaces, thus the usage
#            is a combination of the prototypes for the other low
#            level modules and resembles "pm" more than the others.
#            Furthermore, the Ice Box responds to more commands than
#            just [on | off | reset].
#            Also note that we no longer support bitmap mode
#            Use -q for quiet mode rather than -v for verbose
####################################################################

import sys
import commands
import string
import getopt
import os
import fcntl, FCNTL

class NodeClass:
    "Class definition for icebox attached nodes"
    name = ""
    tty  = ""
    box  = ""
    port = ""

    def __init__(self, name, tty, box, port):
        "Node class initialization"
        self.name = name
        self.tty  = tty
        self.box  = box
        self.port = port

class PortClass:
    "Class definition for an icebox port"
    name      = ""
    node      = None
    requested = 0

    def __init__(self, name, node):
        "Port class initialization"
        self.name      = name
        self.node      = node
        self.requested = 0

class BoxClass:
    "Class definition for an icebox"
    name          = ""
    tty           = ""
    ports         = {}
    num_connected = 0
    num_requested = 0

    def __init__(self, name, tty):
        "Box class initialization"
        self.name          = name
        self.tty           = tty
        self.ports         = {}
        self.num_connected = 0
        self.num_requested = 0

    def add(self, port):
        "Add a port to the list of occupied ports on the icebox"
        self.ports[port.name] = port
        self.num_connected = self.num_connected + 1

class TtyClass:
    "Class definition for a tty with icebox(es) attached"
    name  = ""
    boxes = {}

    def __init__(self, name):
        "Tty class initialization"
        self.name  = name
        self.boxes = {}

def usage(msg):
    print "usage:", sys.argv[0], "[-a] [-c conf] [-f fan] [-l ldir] [-q] [-r] [-t] [-V] [-w node,...] [on | off | reset | temp | tempf | ice n cm]"
    print "-a       = on/off/reset all nodes"
    print "-c conf  = configuration file (default: <ldir>/etc/bogus.conf)"
    print "-f fan   = fanout for parallelism (default: 256 where implemented)"
    print "-l ldir  = powerman lirary directory (default: /usr/lib/powerman)"
    print "-q       = suppress printing any errors that may have occurred"
    print "-r       = reverse sense, i.e. check for  nodes that are off"
    print "-t       = return the temperature rather than power status"
    print "-V       = print version and exit"
    print "-w nodes = comma separated list of nodes"
    print "-w -     = read nodes from stdin, one per line"
    print "on       = turn on nodes (the default)"
    print "off      = turn off nodes"
    print "reset    = reset nodes"
    print "temp     = print the temperature status"
    print "tempf    = print the full temperature status"
    print "ice n cm = send cm to Ice Box number n"
    print msg
    sys.exit(0)

def init(f):
    "Read in the node, tty, box, and port for each node from the configuration file"
    node  = None
    nodes = {}
    tty   = None
    ttys  = {}
    box   = None
    port = None
    line = f.readline()
    while (line):
        tokens = string.split(line)
        # you need this here because of the "coninue"s below
        line = f.readline()
	if(len(tokens) < 4):
            continue
        if (tokens[0][0] == '#'): continue
        node = NodeClass(tokens[0], tokens[1], tokens[2], tokens[3])
        nodes[tokens[0]] = node
        port = PortClass(tokens[3], node)
        try:
            tty = ttys[tokens[1]]
        except KeyError:
            tty = TtyClass(tokens[1])
            ttys[tokens[1]] = tty
        try:
            box = tty.boxes[tokens[2]]
        except KeyError:
            box = BoxClass(tokens[2], tokens[1])
            tty.boxes[tokens[2]] = box
        box.add(port)
    return nodes, ttys

Version = "icebox:Powerman 0.1.6"

# Check for level of permision and exit for non-root users

stat, uid = commands.getstatusoutput('/usr/bin/id -u')
if (stat == 0):
    if (uid != '0'):
        if(verbose):
            sys.stderr.write("icebox: You must be root to run this\n")
        sys.exit(1)
else:
    if(verbose):
        sys.stderr.write("icebox: Error attempting to id -u\n")
    sys.exit(1)

# initialize globals
powermandir  = '/usr/lib/powerman/'
config_file = 'etc/icebox.conf'
verbose     = 1
reverse     = 0
temperature = 0
names       = []
com         = 'ns'
opts        = ''
all         = 0
fanout      = 256
setting     = 0
ICEBOX_SIZE = 10

# Look for environment variables and set globals

try:
    test = os.environ['POWERMANDIR']
    if (os.path.isdir(test)):
        powermandir = test
except KeyError:
    pass

# Parse the command line, check for sanity, and set globals

try:
    opts, args = getopt.getopt(sys.argv[1:], 'ac:f:l:rw:tvV')
except getopt.error:
    usage("Error processing options\n")

if(not opts):
    usage("provide a list of nodes")

for opt in opts:
    op, val = opt
    if (op == '-a'):
        all = 1
    elif (op == '-c'):
        config_file = val
    elif (op == '-f'):
        fanout = val
    elif (op == '-l'):
        powermandir  = val
    elif (op == '-q'):
        verbose = 0
    elif (op == '-r'):
        reverse = 1
    elif (op == '-t'):
        com = 'ts'
    elif (op == '-V'):
        print Version
        sys.exit(0)
    elif (op == '-w'):
        if (val == '-'):
            name = sys.stdin.readline()
            while (name):
                if (name[-1:] == '\n'):
                    name = name[:-1]
                names.append(name)
                name = sys.stdin.readline()
        else:
            names = string.split(val, ',')
    else:
        usage("Unrecognized option " + op + "\n")

try:
    if (args and args[0]):
        if (args[0] == 'off'):
            com = 'pl'
            setting = 1
        elif (args[0] == 'on'):
            com = 'ph'
            setting = 1
        elif (args[0] == 'reset'):
            com = 'rp'
            setting = 1
        elif (args[0] == 'temp'):
            com = 'ts'
        elif (args[0] == 'tempf'):
            com = 'tsf'
        elif (args[0] == 'ice'):
            if (len(args) == 4):
                com = 'ice'
                targettty = args[1]
                targetcom = 'c' + args[2] + args[3]
        else:
            if(verbose):
                sys.stderr.write("icebox: Unrecognized command " + args[0] + "\n")
            sys.exit(1)
except TypeError:
        if(verbose):
            sys.stderr.write("icebox: Internal Error: " + args + " should be a list\n")
        sys.exit(1)

if (powermandir):
    if (powermandir[-1] != '/'):
        powermandir = powermandir + '/'
    if(os.path.isdir(powermandir)):
        sys.path.append(powermandir)
        config_file = powermandir + config_file
    else:
        if(verbose):
            sys.stderr.write("icebox: Couldn\'t find library directory: " + powermandir + "\n")
        sys.exit(1)
else:
    if(verbose):
        sys.stderr.write("icebox: Couldn\'t find library directory: " + powermandir + "\n")
    sys.exit(1)
    
try:
    # I could put in a shared lock here, but it doesn't seem highly necessary
    f = open(config_file, 'r')
    nodes, ttys = init(f)
    f.close()
except IOError :
    if(verbose):
        sys.stderr.write("icebox: Couldn\'t find configuration file: " + config_file + "\n")
    sys.exit(1)
    

if (com == "ice"):
    # This only happens for directly invoking icebox on the command line
    # pm will never call it, and is never called from pm
    response = ''
    # just pass along the command
    try:
        f = open(targettty, 'r+')
    except IOError:
        if(verbose):
            sys.stderr.write ("icebox: Unable to access icebox control device on port " + targettty + "\n")
        sys.exit(1)
    try:
        fcntl.lockf(f.fileno(), FCNTL.LOCK_EX | FCNTL.LOCK_NB)
    except IOError:
        if(verbose):
            sys.stderr.write ("icebox: Unable to gain exclusive lock on icebox control device on port " + targettty + "\n")
        sys.exit(1)
    f.write(targetcom)
    response = f.readline()
    if (string.lower(response) != 'ok'):
        if (verbose):
            sys.stderr.write ("icebox: Error returned from tty " + targettty + " after command \"" + targetcom + "\"\n")
        sys.exit(1)
    f.close()
    exit(0)
    
if (all):
    for name in nodes.keys():
        box = ttys[nodes[name].tty].boxes[nodes[name].box]
        box.ports[nodes[name].port].requested = 1
        box.num_requested = box.num_requested + 1
else:
    for name in names:
        try:
            box = ttys[nodes[name].tty].boxes[nodes[name].box]
            box.ports[nodes[name].port].requested = 1
            box.num_requested = box.num_requested + 1
        except KeyError:
            if (verbose):
                sys.stderr.write ("icebox: " + name + " is not a recogognized node name\n")
            sys.exit(1)
            
        
# carry out the requested command on each node
for tty_name in ttys.keys():
    tty = ttys[tty_name]
    try:
        f = open(tty_name, 'r+')
    except IOError:
        if(verbose):
            sys.stderr.write ("icebox: Unable to access icebox control device on port " + tty_name + "\n")
        sys.exit(1)
    try:
        fcntl.lockf(f.fileno(), FCNTL.LOCK_EX | FCNTL.LOCK_NB)
    except IOError:
        if(verbose):
            sys.stderr.write ("icebox: Unable to gain exclusive lock on icebox control device on port " + tty_name + "\n")
        sys.exit(1)
    for box_name in tty.boxes.keys():
        box = tty.boxes[box_name]
        if (box.num_requested == ICEBOX_SIZE):
            target = 'c' + box.name + com + '\n'
            response = ''
            f.write(target)
            response = f.readline()
            while ((response[-1:] == '\n') or (response[-1:] == '\r')):
                response = response[:-1]
            if ((com == 'on') or (com == 'off') or (com == 'reset')):
                if (string.lower(response) != 'ok'):
                    if (verbose):
                        sys.stderr.write ("icebox: Error returned from icebox " + box.name + " after command \"" + target + "\"\n")
                    sys.exit(1)
            elif(com == 'ns'):
                try:
                    list = string.split(response)
                except ValueError:
                    if (verbose):
                        sys.stderr.write ("icebox: Unexpected return \"" + response + "\" from box " + box.name + " after command \"" + target + "\"\n")
                    sys.exit(1)
                for resp in list:
                    try:
                        p,state = string.split(resp, ':')
                    except ValueError:
                        if (verbose):
                            sys.stderr.write ("icebox: Unexpected return \"" + response + "\" from box " + box.name + ", port" + p +" after command \"" + target + "\"\n")
                        sys.exit(1)
                    if (((state == '0') and reverse) or ((state == '1') and not reverse)):
                        print box.ports[p[1:]].node.name
            elif((com == 'ts') or (com == 'tsf')):
                try:
                    list = string.split(response)
                except ValueError:
                    if (verbose):
                        sys.stderr.write ("icebox: Unexpected return \"" + response + "\" from box " + box.name + " after command \"" + target + "\"\n")
                    sys.exit(1)
                for resp in list:
                    try:
                        p,temps = string.split(resp, ':')
                    except ValueError:
                        if (verbose):
                            sys.stderr.write ("icebox: Unexpected return \"" + response + "\" from node " + name + " after command \"" + target + "\"\n")
                        sys.exit(1)
                    print box.ports[p[1:1]].node.name + ":" + temps
        else:
            # (num_requested != ICEBOX_SIZE):
            for port_name in box.ports.keys():
                port = box.ports[port_name]
                if (port.requested == 0):
                    continue
                target = 'c' + box.name + com + port.name + '\n'
                response = ''
                f.write(target)
                response = f.readline()
                while ((response[-1:] == '\n') or (response[-1:] == '\r')):
                    response = response[:-1]
                if ((com == 'on') or (com == 'off') or (com == 'reset')):
                    if (string.lower(response) != 'ok'):
                        if (verbose):
                            sys.stderr.write ("icebox: Error returned from port " + port.name + " after command \"" + target + "\"\n")
                        sys.exit(1)
                elif(com == 'ns'):
                    try:
                        p,state = string.split(response, ':')
                    except ValueError:
                        if (verbose):
                            sys.stderr.write ("icebox: Unexpected return \"" + response + "\" from port " + port.name + " after command \"" + target + "\"\n")
                        sys.exit(1)
                    if (((state == '0') and reverse) or ((state == '1') and not reverse)):
                        print port.node.name
                elif((com == 'ts') or (com == 'tsf')):
                    try:
                        p,temps = string.split(response, ':')
                    except ValueError:
                        if (verbose):
                            sys.stderr.write ("icebox: Unexpected return \"" + response + "\" from node " + name + " after command \"" + target + "\"\n")
                        sys.exit(1)
                    print port.node.name + ":" + temps
                    
    fcntl.lockf(f.fileno(), FCNTL.LOCK_UN)
    f.close()
sys.exit(0)

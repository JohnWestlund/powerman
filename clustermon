#!/usr/bin/expect --
####################################################################
# $Id$
# by Andrew C. Uselton <uselton2@llnl.gov> 
# Copyright (C) 2000 Regents of the University of California
# See ../DISCLAIMER
# v. 0-0-1:  2001-07-11
# v. 0-0-2:  2001-07-31
####################################################################
# clustermon [-c file] [-l libdir] [-dv]

proc usage msg {
  global argv0
  puts "usage: $argv0 \[-c file\] \[-l libdir\] \[-defhqrv\] \[-on | -off\] {nodes ...}"
  puts "-c file   = load file as config file"
  puts "-d        = debugging output"
  puts "-l libdir = look for tcl libs in libdir"
  puts "-v        = be verbose"
  puts $msg
  exit
}

if { [exec id -u] } {
    usage "You must be root to run this"
}

namespace eval app {}

set app::config_file "/etc/powerman.conf"
if {[info exists env(POWERMANCONF)]} {
    set app::config_file $env(POWERMANCONF)
}
set app::lib_dir "/usr/lib/powerman"
if {[info exists env(POWERMANLIBDIR)]} {
    set app::lib_dir $env(POWERMANLIBDIR)
}
set debug 0
set app::verbose 0
set app::tkdanger 0
for {set i 0} {$i < $argc} {incr i} {
  switch -- [lindex $argv $i] {
      "-c" { 
	  incr i
	  set app::config_file [lindex $argv $i]
      }
      "-d" {set debug 1}
      "-l" { 
	  incr i
	  set app::lib_dir [lindex $argv $i]
      }
      "-q" {set query 1}
      "-v" {set app::verbose 1}
      default {
	usage [format "Unrecognized argument: %s" [lindex $argv $i]]
      }
  } 
}

if {![file exists $app::config_file]} {
   usage "Can't find config file $app::config_file"
}

set powerlib [format "%s/powerlib.tcl" $app::lib_dir]
if {[file exists $powerlib]} {
    source $powerlib
} else {
    usage "Can't find $powerlib library"
}

# At this point all the globals should be in place and initialized for
# the local configuration.  The hardware dependent layer is intialized
# next. .

# Assemble the list of nodes in the cluster

if {[llength $powerlib::nodes] < 1} {usage "I don't see any nodes"}

# Sequence through nodes printing a 1 for on and a 0 for off

set response [powerlib::check $powerlib::nodes on]
set status_line ""
foreach node $powerlib::nodes {
    if {[lsearch -exact $response $node] < 0} {
	set status_line [format "%s%s" $status_line "0"]
    } else {
	set status_line [format "%s%s" $status_line "1"]
    }
}
puts "$status_line"




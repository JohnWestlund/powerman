#
# $Id$
# $Source$
#
# IBM Remote Supervisor Adapter (RSA) 
#
# The RSA is an externally powered PCI adapter with its own ethernet connection
# and an RS485 interface.  The RS485 interface daisy chains serveral IBM
# xSeries nodes, including the node hosting the RSA adapter.  The xSeries 
# nodes have a service processor, based on the H8 microprocessor (the "hawk")
# integrated into the mainboard.  The RSA adapter can forward power 
# on/off/status commands to the hawks via RS485.
# 
# Normally the RSA's provide a web front end.  PowerMan uses an undocumented
# debug interface available by telnetting into the RSA and typing ctrl-D.
# The 'power' command in debug mode was added in April 2003 in f/w versions:
# GEET117A (x345) and T2ET116- (x335).
#
# The 'power' command takes dynamically assigned RS485 ID's.  The login script
# uses the 'remotesp' command to map hostnames to RS485 ID's, which PowerMan
# uses as plug names.  
#
# Big Caveat(!): the RSA can't control power for the node hosting it via the
# power interface.  There is a way to do it through the telnet menu interface
# but that is not supported here (yet).
#
specification "ibmrsa" {
	timeout  	20

	script login {
		expect "Login ID:"
		send "USERID\r\n"
		send "PASSW0RD\r\n"
		expect "Select" 
		delay 1
		send "\004"  			# ^D to enter "debug mode"
		expect "==> "

		send "remotesp\r\n"
		foreachnode {
			expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
			setplugname $2 $1	# node plug
		}
	}
	script logout {
		send "\004"  			# ^D to log completely off
	}
	script status_all {
		send "power 2 0\r\n"
		foreachnode {
			expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
			setplugstate $1 $2 on="on" off="off"
		}
	}
	script on {
		send "power 1 %s\r\n"
		expect "Status = on\r\n"
	}
	script on_all {
		send "power 1 0\r\n"
		foreachnode {
			expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		}
	}
	script off {
		send "power 0 %s\r\n"
		expect "Status = off\r\n"
	}
	script off_all {
		send "power 0 0\r\n"
		foreachnode {
			expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		}
	}
	script cycle {
		send "power 0 %s\r\n"
		expect "Status = off\r\n"
		delay 2
		send "power 1 %s\r\n"
		expect "Status = on\r\n"
	}
	script cycle_all {
		send "power 0 0\r\n"
		foreachnode {
			expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		}
		delay 2
		send "power 1 0\r\n"
		foreachnode {
			expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		}
	}
}

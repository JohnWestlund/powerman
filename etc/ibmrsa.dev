#
# $Id$
# $Source$
#
# IBM Remote Supervisor Adapter (RSA) 
#
# The RSA is an externally powered PCI adapter with its own ethernet connection
# and an RS485 interface.  The RS485 interface daisy chains up to 20 IBM 
# x-series nodes, including the node hosting the RSA adapter.  The x-series 
# nodes have a service processor, based on the H8 microprocessor and code 
# named "hawk", integrated into the mainboard.  The RSA adapter can forward 
# power on/off/status commands to the hawks via RS485.
# 
# Normally the RSA's provide a web front end.  PowerMan uses an undocumented
# debug interface available by telnetting into the RSA and typing ctrl-D.
# The 'power' command in debug mode was added in April 2003 in f/w versions:
# GEET117A (x345) and T2ET116- (x335).
#
specification "ibmrsa" {
	type 		TELNET
	offstring 	"off"
	onstring  	"on"
	timeout  	20

	script login {
		expect "Login ID:"
		send "USERID\r\n"
		send "PASSW0RD\r\n"
		expect "Select" 
		delay 1
		send "\004"  			# ^D to enter "debug mode"
		expect "==> "

		send "remotesp\r\n"
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
		expect "[^ ]+[ ]+([^ ]+)[ ]+Hawk[ ]+([0-9A-F]+)"
		setplugname $1 $2
	}
	script logout {
		send "\004"  			# ^D to log completely off
	}
#	script status {
#		send "power 2 %s\r\n"
#		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
#		setstatus $1 $2 
#	}
	script status_all {
		send "power 2 0\r\n"
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
		expect "Server 0x([0-9A-F]{2}) Status = (on|off)"
		setstatus $1 $2 
	}
	script on {
		send "power 1 %s\r\n"
		expect "Status = on\r\n"
	}
	script off {
		send "power 0 %s\r\n"
		expect "Status = off\r\n"
	}
	script cycle {
		send "power 0 %s\r\n"
		expect "Status = off\r\n"
		delay 2
		send "power 1 %s\r\n"
		expect "Status = on\r\n"
	}
}

#
# $Id$
# $Source$
#
# Tested with APC MasterSwitch plus 
# APP v2.0.0 / AOS v2.5.4
#
specification {
	name 		"apc"
	type 		"telnet"
	offstring 	"OFF"
	onstring  	"ON"
	maxplugcount 	8
	timeout 	10  

	script login {
		expect "\n"
		expect "User Name : "
		send "apc\r\n"
		expect "Password  : "
		send "apc\r\n"
		expect "> "
		send "1\r\n"  # device manager menu
		expect "> "
		send "1\r\n"  # select master switch plus 1 
		expect "> "
	}
	script logout {
		send "4\r\n"
	}
	script status_all {
		send "\r\n"  # refresh
		expect "(1)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(2)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(3)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(4)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(5)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(6)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(7)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "(8)-[^\n]*(ON|OFF)[^\n]*\r\n"
		setstatus $1 $2
		expect "> "
	}
	script on {
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	}
	script on_all {
		send "9\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	}
	script off {
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	}
	script off_all {
		send "9\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	}
# If outlet is initially off, "immediate reboot" (4) will leave it off.
# This doesn't match PowerMan's semantics for cycle, therefore do explicit
# immediate off + immediate on.
	script cycle {
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		delay 2

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	}
	script cycle_all {
		send "9\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		delay 2

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	}
	plug name "1"
	plug name "2"
	plug name "3"
	plug name "4"
	plug name "5"
	plug name "6"
	plug name "7"
	plug name "8"
}

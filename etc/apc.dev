#
# $Id$
# $Source$
#
# Tested with APC MasterSwitch plus 
# APP v2.0.0 / AOS v2.5.4
#
begin protocol specification
	specification name "apc"
	specification type "TCP"
	off string "OFF"
	on string  "ON"
	plug count 8
	device timeout 10  
	begin LOGIN_SCRIPT
		expect "\n"
		send "\IAC\DO\TELOPT_ECHO\IAC\DO\TELOPT_SGA\IAC\DONT\TELOPT_TTYPE"
		expect "User Name : "
		send "apc\r\n"
		expect "Password  : "
		send "apc\r\n"
		expect "> "
		send "1\r\n"  # device manager menu
		expect "> "
		send "1\r\n"  # select master switch plus 1 
		expect "> "
	end LOGIN_SCRIPT
	begin LOGOUT_SCRIPT
		send "4\r\n"
	end LOGOUT_SCRIPT
	begin STATUS_ALL_SCRIPT
		send "\r\n"  # refresh
		expect "1-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "1"
		expect "2-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "2"
		expect "3-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "3"
		expect "4-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "4"
		expect "5-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "5"
		expect "6-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "6"
		expect "7-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "7"
		expect "8-[^\n]*(ON|OFF)[^\n]*\r\n"
			map $1 "8"
		expect "> "
	end STATUS_ALL_SCRIPT
	begin ON_SCRIPT
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	end ON_SCRIPT
	begin ON_ALL_SCRIPT
		send "9\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	end ON_ALL_SCRIPT
	begin OFF_SCRIPT
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	end OFF_SCRIPT
	begin OFF_ALL_SCRIPT
		send "9\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	end OFF_ALL_SCRIPT
# If outlet is initially off, "immediate reboot" (4) will leave it off.
# This doesn't match PowerMan's semantics for cycle, therefore do explicit
# immediate off + immediate on.
	begin CYCLE_SCRIPT
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		delay 2

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	end CYCLE_SCRIPT
	begin CYCLE_ALL_SCRIPT
		send "9\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "8\r\n" # cancel any pending delays
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "3\r\n" # immediate off
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		delay 2

		send "1\r\n" # immediate on
		expect "Enter 'YES' to continue or <ENTER> to cancel : "
		send "YES\r\n"
		expect "Success\r\n"
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "> "
	end CYCLE_ALL_SCRIPT
	plug name "1"
	plug name "2"
	plug name "3"
	plug name "4"
	plug name "5"
	plug name "6"
	plug name "7"
	plug name "8"
end protocol specification

#
# $Id:$
#
# Written by Trent D'Hooge and Makia Minich
#
# Should support the following 24-plug APC Switched Rack PDU models:
#   AP7930, AP7932
#   AP7940, AP7941
#   AP7960, AP7961, AP7968, AP7990, AP7991, AP7998 
#   AP7951, AP7952, AP7953, AP7954
#
# - Firmware: APP v2.6.5 / AOS v2.6.4
#
specification "apcpdu" {
	timeout 	10  

	plug name { "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" }

	script login {
		expect "\n"
		expect "\rUser Name : "
		send "apc\r\n"
		expect "\rPassword  : "
		send "apc\r\n"
		expect "> "
		send "1\r\n"  # device manager menu
		expect "> "
		send "3\r\n"  # outlet control/configuration
		expect "to continue..."
		send "\r\n"
		expect "> "
	}
	script logout {
		send "\033"
		expect "> "
		send "\033"
		expect "> "
		send "4\r\n"
	}
	script status_all {
		send "\r\n"  # refresh
		expect "1- Outlet 1                 (ON|OFF)\r\n"
		setplugstate "1" $1 on="ON" off="OFF"
		expect "    2- Outlet 2                 (ON|OFF)\r\n"
		setplugstate "2" $1 on="ON" off="OFF"
		expect "    3- Outlet 3                 (ON|OFF)\r\n"
		setplugstate "3" $1 on="ON" off="OFF"
		expect "    4- Outlet 4                 (ON|OFF)\r\n"
		setplugstate "4" $1 on="ON" off="OFF"
		expect "    5- Outlet 5                 (ON|OFF)\r\n"
		setplugstate "5" $1 on="ON" off="OFF"
		expect "    6- Outlet 6                 (ON|OFF)\r\n"
		setplugstate "6" $1 on="ON" off="OFF"
		expect "    7- Outlet 7                 (ON|OFF)\r\n"
		setplugstate "7" $1 on="ON" off="OFF"
		expect "    8- Outlet 8                 (ON|OFF)\r\n"
		setplugstate "8" $1 on="ON" off="OFF"
		expect "    9- Outlet 9                 (ON|OFF)\r\n"
		setplugstate "9" $1 on="ON" off="OFF"
		expect "   10- Outlet 10                (ON|OFF)\r\n"
		setplugstate "10" $1 on="ON" off="OFF"
		expect "   11- Outlet 11                (ON|OFF)\r\n"
		setplugstate "11" $1 on="ON" off="OFF"
		expect "   12- Outlet 12                (ON|OFF)\r\n"
		setplugstate "12" $1 on="ON" off="OFF"
		expect "   13- Outlet 13                (ON|OFF)\r\n"
		setplugstate "13" $1 on="ON" off="OFF"
		expect "   14- Outlet 14                (ON|OFF)\r\n"
		setplugstate "14" $1 on="ON" off="OFF"
		expect "   15- Outlet 15                (ON|OFF)\r\n"
		setplugstate "15" $1 on="ON" off="OFF"
		expect "   16- Outlet 16                (ON|OFF)\r\n"
		setplugstate "16" $1 on="ON" off="OFF"
		expect "   17- Outlet 17                (ON|OFF)\r\n"
		setplugstate "17" $1 on="ON" off="OFF"
		expect "   18- Outlet 18                (ON|OFF)\r\n"
		setplugstate "18" $1 on="ON" off="OFF"
		expect "   19- Outlet 19                (ON|OFF)\r\n"
		setplugstate "19" $1 on="ON" off="OFF"
		expect "   20- Outlet 20                (ON|OFF)\r\n"
		setplugstate "20" $1 on="ON" off="OFF"
		expect "   21- Outlet 21                (ON|OFF)\r\n"
		setplugstate "21" $1 on="ON" off="OFF"
		expect "   22- Outlet 22                (ON|OFF)\r\n"
		setplugstate "22" $1 on="ON" off="OFF"
		expect "to continue..."
		send "\r\n"
		expect "   23- Outlet 23                (ON|OFF)\r\n"
		setplugstate "23" $1 on="ON" off="OFF"
		expect "   24- Outlet 24                (ON|OFF)\r\n"
		setplugstate "24" $1 on="ON" off="OFF"
		expect "> "
	}
	script on {
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "7\r\n" # cancel any pending delays
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "1\r\n" # immediate on
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "to continue..."
		send "\r\n"
		expect "> "
	}
	script on_all {
		send "25\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "7\r\n" # cancel any pending delays
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "4\r\n" # delayed on
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "to continue..."
		send "\r\n"
		expect "> "
	}
	script off {
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "7\r\n" # cancel any pending delays
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "2\r\n" # immediate off
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "to continue..."
		send "\r\n"
		expect "> "
	}
	script off_all {
		send "25\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "7\r\n" # cancel any pending delays
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "5\r\n" # delayed off
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "to continue..."
		send "\r\n"
		expect "> "
	}
# If outlet is initially off, "immediate reboot" (4) will leave it off.
# This doesn't match PowerMan's semantics for cycle, therefore do explicit
# immediate off + immediate on.
	script cycle {
		send "%s\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "7\r\n" # cancel any pending delays
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "2\r\n" # immediate off
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		delay 3

		send "1\r\n" # immediate on
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "to continue..."
		send "\r\n"
	}
	script cycle_all {
		send "25\r\n"
		expect "> "
		send "1\r\n" # select outlet control
		expect "> "

		send "7\r\n" # cancel any pending delays
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "5\r\n" # delayed off
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		delay 3

		send "4\r\n" # delayed on
		expect "to cancel : "
		send "YES\r\n"
		expect "to continue..."
		send "\r\n"
		expect "> "

		send "\033"
		expect "> "
		send "\033"
		expect "to continue..."
		send "\r\n"
		expect "> "
	}
}

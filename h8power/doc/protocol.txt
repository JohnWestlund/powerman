This is what I think I've learned about the xSeries RS-485 protocol
by watching an RSA control an RS-485 chain:

1) Packet framing

Packets are preceded by a 9 byte start sentinel, 4 bytes of header, 
a variable number of data bytes, a variable number of trailer bytes
(purpose unknown), a CRC byte, and a 1 byte end sentinel:

- 9 byte start sentinel: 0xfd fd fd fd fd fd fd fd fc
- 1 byte dst addr
- 1 byte src addr
- 1 byte (purpose unknown - always zero?)
- 1 byte data length <len>
- <len> data bytes
- <?> bytes of trailer (purpose unknown)
- 1 byte crc
- 1 byte end sentinel: 0xff

Bytes with values between 0xfa and 0xff are escaped when sent out in
the wire.  A byte with value N is converted to a two byte sequence:

  fb (0xff - N)

All bytes except sentinels are subject to this conversion.

The CRC byte, calculated before escape processing for outgoing packets,
is computed over all bytes except sentinels, crc (obviously), and trailer.
The bytes are summed in a single unsigned byte value N, and the CRC is 
(0xff - N + 2).  

2) Collisions

Collisions are possible on the RS485, and as far as I can tell there is no 
NAK protocol.  Packets with incorrect framing are silently discarded.  
Therefore, in requests such as power on/off which do not evoke replies,
there is no guarantee of packet receipt.  If receipt must be assured, the
on/off request should be followed by a status request.

Be aware that on a chain of 20 nodes, a heartbeat (T=32s) will be on the wire
on average every 1.5 seconds, and a 132 byte packet takes about 20 ms to
transmit at 57600 baud so the wire is in use about 1% of the time just
from this background noise.

3) Address assignment

The RSA uses a low numbered address, starting at 0x01.
The H8's use higher numbered addresses starting at 0x80.
The broadcast address is 0x1f.

Each H8, upon power up, employs the following algorithm to obtain
a unique one byte RS-485 address:  it starts with 0x80 as a candidate
address and sends a small packet addressed to itself.  If another node 
replies (with a packet addressed to itself), then it assumes the 
address is in use and it increments the candidate address and tries 
again.  If no node responds within 2 seconds, the candidate address 
becomes the node's address and the H8 proceeds to send out a status 
broadcast.  This all happens peer-to-peer without participation of the 
RSA.

Presumably in a chain with mulitple RSA's, each RSA would use the same
algorithm starting with 0x01 to find a unique address.

4) Heartbeat

Each H8 broadcasts a heartbeat packet every 32s.  This packet contains 
(among other things) the SP name of the sender.  Heartbeat data begins with 
fa 02, and the SP name begins at data byte offset 0x35 and is null-terminated.  

The RSA also broadcasts a hearbeat with a slightly different data format.
Its data begins with f2 02. 

5) Presence of RSA

With the RSA adapter present, a lot more goes on that with it absent,
increasing the likelihood of collisions.  The description of power commands 
below assumes the RSA is absent and all H8's in the RS485 chain have been 
power cycled since it was removed.  (E.g. in systems with RSA's, a power
on causes the H8 to send several packets to the RSA, and to resend them if
there is no reply.  This makes the shotgun approach for power control 
ineffective because there are packets on the wire about 80ms after the 
first node receives the power command).

6) Power status request/response

The first two data bytes of all power commands are f3 50.  The third
data byte is a sequence number (range 0-1f) that is reproduced in the 
response.

Request: f3 50 <seq> 02 f4 0c

Response (off): f3 50 <seq> 00 03 f4 00 0c
      or (on):  f3 50 <seq> 00 03 f4 01 0b

Response is fairly rapid - about 10ms.  It is probably reasonable to send
multiple requests by transmitting them one at a time and waiting for responses
with say a 100ms timeout.  To deal with the possibility of requests or 
responses discarded due to collisions, any timed out requests should be 
repeated some number of times before giving up (say 3).

7) Power on/off request

Request (off): f3 50 <seq> 00 03 f0 00 10
     or (on):  f3 50 <seq> 00 03 f0 01 0f

There is no response.  It is safe (from a protocol perspective - maybe not
from a power perspective!) to send these out with no intervening delays.
For power on/off requests to be reliable, it is necessary to verify the 
resulting power state of the node with a power status request.

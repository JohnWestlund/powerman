\."#################################################################
\."$Id$
\."by Andrew C. Uselton <uselton2@llnl.gov> 
\."#################################################################
\."  Copyright (C) 2001-2002 The Regents of the University of California.
\."  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
\."  Written by Andrew Uselton (uselton2@llnl.gov>
\."  UCRL-CODE-2002-008.
\."  
\."  This file is part of PowerMan, a remote power management program.
\."  For details, see <http://www.llnl.gov/linux/powerman/>.
\."  
\."  PowerMan is free software; you can redistribute it and/or modify it under
\."  the terms of the GNU General Public License as published by the Free
\."  Software Foundation; either version 2 of the License, or (at your option)
\."  any later version.
\."  
\."  PowerMan is distributed in the hope that it will be useful, but WITHOUT 
\."  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
\."  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
\."  for more details.
\."  
\."  You should have received a copy of the GNU General Public License along
\."  with PowerMan; if not, write to the Free Software Foundation, Inc.,
\."  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
\."#################################################################
.\"
.TH POWERMAN.CONF 1 "Release 1.0.0" "LLNL" "POWERMAN.CONF"

.SH NAME
powerman.conf \- configuration file for PowerMan

.SH DESCRIPTION
.LP
A PowerMan config file consists of four sections:
.br
.I Device Specification List
.br
.I Global Configuration
.br
.I Device List
.br
.I Node List 
.LP
Each section comprises several fields of the form 
.RS
	<keyword(s)> <strings>
.RE
Keywords are always lower-case and unquoted, and strings are 
always quoted.  The quoted strings give values to the fields 
identified by the keyword(s).  Keywords and strings are free 
format and white space delimitted, though by convention there is 
one field with its string(s) per line, and lines are indented in 
subsections.  The grammar for the configuration file parser 
requires the four sections to be in order.  Additional constriants 
will be mentioned below.

.SH Device Specification List

  The device specification lists all the kinds of devices that 
may be used later in the Device List.  Each specification has
a few general configuration details, a list of scripts - each
of which details how a particular device command is carried
out - and a list of plugs.
.LP
.RS
  include "<path>"
.RE
An include directive may appear anywhere in the configuration file
but is most commonly used (one each) for one or more device 
specification files (.dev files), where a .dev file holds the 
entirety of one device specification.  See the individual .dev 
files for hints on their contents.  An extended discussion of the
device specification for an Icebox is included at the end of this 
man page.  
.LP
The path must be absolute.  The standard distribution of 
.B PowerMan
includes the following .dev files: 
.LP
include "/etc/powerman/icebox.dev"
.br
include "/etc/powerman/wti.dev"
.br
include "/etc/powerman/baytech.dev"
.br

.SH Global Configuration

  The global configuration section must start with a "cluster name"
field.  The string can be anything, though obvious pathologies
should probably be avoided (no nonprinting characters, length
no greater than a single 80 character line).  The remaining 
fields in the global section can be in any order and some have
defaults.  The global section begins and ens with "begin gloabl"
and "end global" keywords:
.RS
begin global
.RE
.LP
.I  cluster name "<string>" 
.br
This field must be first.  The physical limit on the string's
length is somewhere around 64k bytes, but as a practical matter 
should fit easily on an 80 character line.  It can be anything,
and the value is not used at present, though it may in future 
versions.

.RS
	cluster name "tux"
.RE

.LP
.I  log file "<path>" "<level>"
.br
This field is optional.  If included, the path should be absolute.
Level is a non-negative integer.  Each log-able message in the daemon
is associated with a log-level value, and messags with log-level
greater than the level listed here will not be printed.

.RS
	log file "/tmp/powermand.log" "0"
.RE

.LP
.I  client listener port "<port>"
.br
This field is required.  Port is the well-known port value 
on which the daemon will listen for new connections.  For now
it must be a number.  A service name of "powerman" is planned.

.RS
	client listener port "10101"
.RE

.LP
.I  timeout interval "<float>"
.br
This field is optional and defaults to 1.0 second.  At present
the parser wants both the mantissa and the fraction even in the
case that one or the other is zero.  The value "0.0" is legal
and will induce the daemon to poll.  The values ".0" and "1."
will not be interpreted correctly in the current version of the 
parser.  The value controls the main select loop in the dameon.
It should be a small value for responsiveness. 

.RS
	timeout interval "1.0"
.RE

.LP
.I  inter-device delay "<float>"
.br
This field is optional and defaults to 0.2 seconds.  See the 
comments above about formatting floats for the parser.  This 
value paces how frequently the daemon will send commands to
power control devices.  The daemon pauses for <float> seconds
after each command.  This may safely be set to zero in small 
clusters, but in a very large cluster one may want to pace
power on/off commands to avoid surges.  Unfortunately the
implementation for the delay has difficulty pausing for less
than about 0.01 seconds.  If the cluster is very large 
commands may be quite slow.

.RS
	inter-device delay "0.0"
.RE

.LP
.I  update interval "<float>"
.br
This field is optional and defaults to 100.0 seconds.  See the 
comments above about formatting floats for the parser.  If 
no client has made any request of the daemon for this interval
then the daemon will spontaneously request hard and soft
power power status from all nodes in the cluster.

.RS
	update interval "100.0"
.RE

.RS
end global
.RE

.SH Device List

This section has a list (only one in this case) of device
entries.  There is a separate entry for each physical device.

.LP
.I  device "<DevName>" "<SpecName>" "<hostname>" "<port>"
.br
A device entry is required for each physical device used for
power monitoring and/or power control.
.br
o The DevName field identifies this particular device and is how
the nodes section below refers to it.  
.br
o The SpecName field identifies which device specification from
the list above (in one of the .dev files) characterizes this 
device.
.br
o The hostname field gives the host name that will be the 
target of communications.
.br
o The port is the number for the well-know port on which the 
device is listening for connections.  Named services will
be supported in a future version.
.br
The combination of hostaname and port must be unique for each 
device, as must be the DevName it is given.

.RS
device "Icebox" "icebox" "localhost" "1010"
.RE

.SH Node List

This section has a list of the nodes in the cluster.  There is
a separate entry for each node.

.LP
.I  node "<NodeName>" "<DevName>" "<plug>" ["<DevName>" "<plug>"]
.br
o A node entry is required for each node in the cluster.  The 
second DevName, plug pair is for systems with separate devices 
for hard power control and monitoring (the first pair) and soft 
power monitoring (the second pair).
.br
o The NodeName is the name by which the node is known in the 
cluster, which may be an indexed name as shown here, but 
does not have to be.
.br
o The DevName must match a device entry.  It is the device the 
the node is plugged into.
.br
o The plug field identifies the unique position on the device
for that node. It is often a number but does not have to be.
It must correspond to one of the plug entries from the 
device specification for the device DevName.

.RS
begin nodes
.RE
.RS
	node "tux0" "Icebox" "1"
.RE
.RS
	node "tux1" "Icebox" "2"
.RE
.RS
	node "tux2" "Icebox" "3"
.RE
.RS
	node "tux3" "Icebox" "4"
.RE
.RS
	node "tux4" "Icebox" "5"
.RE
.RS
	node "tux5" "Icebox" "6"
.RE
.RS
	node "tux6" "Icebox" "7"
.RE
.RS
	node "tux7" "Icebox" "8"
.RE
.RS
	node "tux8" "Icebox" "9"
.RE
.RS
	node "tux9" "Icebox" "10"
.RE
.RS
end nodes
.RE

.SH "DEVICE SPECIFICATION FOR ICEBOX DEVICES"

.B Caveat:
.br
Creating a working device specification for a new device type
can be tricky and require patience and experimentation.  This goes
especially for devices that begin by negotiating telent settings.
PowerMan does not speak telnet, but such devices can often be
fooled with telnet-ish initial strings in the scripts below.   
.LP
A device specification begins and ends with the "protocol 
specification" keywords.  One or more such must occur as the first
part of a PowerMan configuration file.  Commonly, the specifications
do not change from one environment to another, so they are included
in the PowerMan configuration file with the "include" directive.
This allows for nasty details to be hidden from the more commonly
accessed portion of the configuration file.  
.LP
There are a few general configuration parameters for a device
that are set at the beginning of the specification.  Their details
will be discussed below where they occur.  These few parameters are 
followed by two lists.  The first list has eleven scripts.  Each is
surrounded by a begin/end pair giving the name of the script.  The
second list simply states the names of the plugs the device has.
Commonly the names are counting integers up to the size of the 
device (ref. the size field, below), but they could be anything.
.LP
Each script has a sequence of micro-actions, which I call script
elements, or script-els.  Each script-el is either a send, an expect, 
or a delay.  The name of each of the eleven scripts corresponds to 
one of the possible macro-actions, or just "actions" from now on, the 
PowerMan daemon might take in communicating with a device.  Thus 
there are scripts for LOG_IN, POWER_ON, and such.  The script
(list of script-els) tells how to accomplish the action.  
.LP
  delay "<float>"
.br
When there is a chance that commands could arrive at a device faster
than it could handle them a delay can slow things down.  The float 
field is the time in seconds to delay.  See the above
for more on the allowed form of a float.
.LP
  send "<fmt>"
.br
As its name implies a send script-el will send a message to the 
device.  The fmt field resembles that of a C printf() statement.
For commands that take an argument the fmt will have a %s where the
argument goes.  Generally, this is for target node names or ranges.
In addition to the usual '\\n' and '\\t' formatting characters, 
PowerMan recognizes most of the telnet commands as escape sequences.
See telnet.h for the codes and the baytech.dev device file for an
example of their use. 
.LP
  expect "<exp>"
.br
An expect script-el induces PowerMan to read from the device and 
interpret what is read.  The exp field is a RegEx, possibly with 
substrings to match.  Standard RegEx is used except that it is
extended with the escape codes '\\r' and '\\n'. An
awkward detail about the current implementation is that the buffer
space available in a compiled RegEx expression is only 256 bytes.
A long or complicated RegEx will exceed this space and cause
the library call to silently fail.  This is bad.  If your script
has to read a full srceen, try breaking it into several expects
in a row.  
.LP
  map "<position>" "<plug>" 
.br
An expect that has substrings to match needs some hint about how
those substrings correspond to semantic information about the 
device.  The "off string" and "on string" fields below tell what
off and on look like.  A list of "map" fields after the expect
tells how to match up substrings with plugs.  When a RegEx has 
been matched its list of substrings are noted beginning at 
position 1 and going up to a maximum (in this case) of 20 possible
matches.  The plug name corresponds to one of the names given in
the list of plugs below.  

.LP
The entire specification is surrounded by a begin - end pair of 
keywords.

.RS
begin protocol specification
.RE

.LP
  specification name "<SpecName>"
.br
This field is required and must come first.  There are no special 
constraints on the name used, though short and descriptive makes
sense.

.RS
	specification name "icebox"
.RE
.LP
The rest of the fields before the scripts are all required (except
see the "size" field) and may be in any order.
.LP
  specification type "<spec type>"
.br
There are only two specification types at present:  TCP and PMD.
TELNET is a synonym for TCP, until I implement a full telent 
protocol, if ever.  There is some interest in TTY and SNMP types 
for future releases.  TCP devices get connected via socket as
do PMD devices.  A PMD device is an instance of the PowerMan
daemon masquerading as a power control device.  The pupose of
such an arrangement is to allow possible distributed control of
a large collection of devices.  PMD devices get special handling 
in a few places as noted below.  An, as yet unwritten, extension
to the README file will detail the use of PMD devices.

.RS
	specification type "TCP"
.RE
.LP
  off string "<off-str>"
.br
The off string field tells PowerMan how to recognize the value of 
"off" in a message from the device.

.RS
	off string "0"
.RE

.LP
  on string "<on-str>"
.br
The on string field tells PowerMan how to recognize the value of 
"on" in a message from the device.

.RS
	on string  "1"
.RE

.LP
  all string "<all-str>"
.br
The all string field tells PowerMan how to tell the device that all
of its plugs are being targeted in a command. 

.RS
	all string "*"
.RE

.LP
  size "<integer>"
.br
The size field tells how many plugs the device has.  There will be
this many plug fields below.  PMD devices get their size determined
dynamically and must not have a size field.
.RS
	size "10"
.RE

.LP
  device timeout "<float>"
.br
The device timeout field limits how long the PowerMan daemon will
wait before deciding that a device has become unavailable.  If this 
happens all actions destined for the device are cleared, and once
per "update interval" the daemon tries to reconnect.  Care should be
taken with this parameter because a heavily loaded system could
cause it to seem that a device is unavailable when you just haven't
given it enough time to finish its log in script.  If logging is
on then you will see the PowerMan daemon spamming the log.  

.RS
	device timeout "1.0"
.RE

.LP
  string interpretation mode "<mode>"
.br
The string interpretation mode field will be LITERAL for all current
devices except PMD devices.  The mode REGEX for PMD devices (and 
possibly others at some point) can simplify communications, since
one may desribe groups of plugs rather than list them.

.RS
	string interpretation mode "LITERAL"
.RE

.LP
Here are the eleven scripts.  Their names should be reletively
self-explanitory.  The PM_LOG_IN script is a special case in that
the daemon will spontaneously initiate it as soon as a connection
is established.  PM_CHECK_LOGIN and PM_LOG_OUT do not have any
role in the current implementation.  
.RS
	begin PM_LOG_IN 
.RE
.RS
		expect "V2\\.2\\r\\n" "\\n"
.RE
.RS
		send "auth icebox\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
	end PM_LOG_IN
.RE
.RS
	begin PM_CHECK_LOGIN
.RE
.RS
		send "\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
	end PM_CHECK_LOGIN
.RE
.RS
	begin PM_LOG_OUT
.RE
.RS
		send "q\\r\\n"
.RE
.RS
	end PM_LOG_OUT
.RE
.LP
This is the query for hard power status
.RS
	begin PM_UPDATE_PLUGS 
.RE
.RS
		send "ps *\\r\\n"
.RE
.RS
		expect "N1:([01]) N2:([01]) N3:([01]) N4:([01]) N5:([01]) N6:([01]) N7:([01]) N8:([01]) N9:([01]) N10:([01])[[:space:]]*\\r\\n" "\\n"
.RE
.RS
			map "1" "1"
.RE
.RS
			map "2" "2"
.RE
.RS
			map "3" "3"
.RE
.RS
			map "4" "4"
.RE
.RS
			map "5" "5"
.RE
.RS
			map "6" "6"
.RE
.RS
			map "7" "7"
.RE
.RS
			map "8" "8"
.RE
.RS
			map "9" "9"
.RE
.RS
			map "10" "10"
.RE
.RS
	end PM_UPDATE_PLUGS 
.RE
.LP
This is the query for soft power status
.RS
	begin PM_UPDATE_NODES 
.RE
.RS
		send "ns *\\r\\n"
.RE
.RS
		expect "N1:([01]) N2:([01]) N3:([01]) N4:([01]) N5:([01]) N6:([01]) N7:([01]) N8:([01]) N9:([01]) N10:([01])[[:space:]]*\\r\\n" "\\n"
.RE
.RS
			map "1" "1"
.RE
.RS
			map "2" "2"
.RE
.RS
			map "3" "3"
.RE
.RS
			map "4" "4"
.RE
.RS
			map "5" "5"
.RE
.RS
			map "6" "6"
.RE
.RS
			map "7" "7"
.RE
.RS
			map "8" "8"
.RE
.RS
			map "9" "9"
.RE
.RS
			map "10" "10"
.RE
.RS
	end PM_UPDATE_NODES 
.RE
.RS
	begin PM_POWER_ON
.RE
.RS
		send "ph %s\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
	end PM_POWER_ON
.RE
.RS
	begin PM_POWER_OFF
.RE
.RS
		send "pl %s\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
	end PM_POWER_OFF
.RE
.RS
	begin PM_POWER_CYCLE
.RE
.RS
		send "pl %s\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
		delay "0.3"
.RE
.RS
		send "ph %s\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
	end PM_POWER_CYCLE
.RE
.RS
	begin PM_RESET
.RE
.RS
		send "rp %s\\r\\n"
.RE
.RS
		expect "OK\\r\\n" "\\n"
.RE
.RS
	end PM_RESET
.RE
.RS
	plug name "1"
.RE
.RS
	plug name "2"
.RE
.RS
	plug name "3"
.RE
.RS
	plug name "4"
.RE
.RS
	plug name "5"
.RE
.RS
	plug name "6"
.RE
.RS
	plug name "7"
.RE
.RS
	plug name "8"
.RE
.RS
	plug name "9"
.RE
.RS
	plug name "10"
.RE
.RS
end protocol specification
.RE



.SH "FILES"
/usr/bin/powermand
.br
/usr/bin/powerman
.br
/etc/powerman/powerman.conf
.br

.SH "ORIGIN"
Developed by Andrew  Uselton <useton2@llnl.gov> on LLNL's Linux 
clusters.  This software is open source and distributed under
the terms of the Gnu GPL.  

.SH "SEE ALSO"
powermand(1) powerman.conf(5)

